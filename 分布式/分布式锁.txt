1、基于数据库实现分布式锁
    使用唯一性约束插入一条数据，获取锁的一方插入数据后拿到insert_id, 任务完成后删除该条记录，其他争抢锁的任务方因为唯一性约束而无法插入数据，也就拿不到锁。
2、基于缓存（Redis等）实现分布式锁
    获取锁：SET resource_name my_random_value NX PX 30000
3、基于Zookeeper实现分布式锁
    zookeeper的节点（Znode）构成一棵树。
    节点类型：
        1）持久节点
            客户端与Zookeeper断开后，该节点依旧存在。
        2）持久顺序节点
            按创建的顺序给节点名称编号。
        3）临时节点
            客户端与Zookeeper断开后，临时节点会被删除。
        4）临时顺序节点
            断开连接后，删除。
    获取锁过程：
        首先创建一个持久节点ParentLock，当第一个客户端想要获取锁时，需要在ParentLock这个节点下面创建一个临时顺序节点Lock1。
        其他客户端想要获取锁，都要创建临时节点Lock{N}。
        只有位于临时顺序节点首位的才能获取锁。
        靠后的节点向前面的节点注册Watcher，用于监听前方节点是否存在。
        客户端断开被动删除临时节点；完成任务主动删除临时节点