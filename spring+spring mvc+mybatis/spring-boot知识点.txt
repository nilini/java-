1、如何使用Spring Boot实现异常处理？
Spring 提供了一种使用ControllerAdvice处理异常的非常有用的方法。通过实现一个ControllerAdvice类，来处理控制器类抛出的所有异常。

1）自定义异常类：（spring 对于 RuntimeException 异常才会进行事务回滚。）
public class MyException extends RuntimeException {
    public MyException(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }
    private String code;
    private String msg;
}

2）编写全局异常处理类：
@ControllerAdvice
public class MyControllerAdvice {

    /**
     * 全局异常捕捉处理
     * @param ex
     * @return
     */
    @ResponseBody
    @ExceptionHandler(value = Exception.class)
    public Map errorHandler(Exception ex) {
        Map map = new HashMap();
        map.put("code", 100);
        map.put("msg", ex.getMessage());
        return map;
    }
    /**
     * 拦截捕捉自定义异常 MyException.class
     * @param ex
     * @return
     */
    @ResponseBody
    @ExceptionHandler(value = MyException.class)
    public Map myErrorHandler(MyException ex) {
        Map map = new HashMap();
        map.put("code", ex.getCode());
        map.put("msg", ex.getMsg());
        return map;
    }
}
3）controller中抛出异常进行测试
@RequestMapping("/home")
public String home() throws Exception {
    //throw new Exception("Sam 错误");
    throw new MyException("101", "Sam 错误");
}   

4）如果不需要返回json数据，而要渲染某个页面模板返回给浏览器，那么MyControllerAdvice中可以这么实现：
@ExceptionHandler(value = MyException.class)
public ModelAndView myErrorHandler(MyException ex) {
    ModelAndView modelAndView = new ModelAndView();
    modelAndView.setViewName("error");
    modelAndView.addObject("code", ex.getCode());
    modelAndView.addObject("msg", ex.getMsg());
    return modelAndView;
}
5）补充：如果全部异常处理返回json，那么可以使用 @RestControllerAdvice 代替 @ControllerAdvice ，这样在方法上就可以不需要添加 @ResponseBody。

2、什么是Spring Batch？
    Spring Batch是一个基于Spring的企业批处理框架。通过它可以构建出健壮的企业批处理应用。Spring Batch不仅提供了同意的读写接口、丰富的任务处理方式、灵活的事务管理
    及并发处理，同时还支持日志、监控、任务重启与跳过等特性，大大简化了批处理应用开发，将开发人员从复杂的任务配置管理过程中解放出来。使他们可以更多地去关注核心的业务处理过程。
    https://segmentfault.com/a/1190000016278038?utm_source=tag-newest

3、什么是Spring Profiles？
    Spring Profiles允许用户根据配置文件（dev、test、prod等）来注册bean，因此，当应用程序在开发运行时，只有某些bean可以加载，而在production中，某些其他bean
    可以加载。假设我们的要求是Swagger文档仅适用于QA环境，并且禁用所有其他文档。这可以使用配置文件来完成。

4、什么是Swagger？
    Swagger 广泛用于可视化 API，使用 Swagger UI 为前端开发人员提供在线沙箱。Swagger 是用于生成 RESTful Web 服务的可视化表示的工具，规范和完整框架实现。它使文档能够以
    与服务器相同的速度更新。当通过 Swagger 正确定义时，消费者可以使用最少量的实现逻辑来理解远程服务并与其进行交互。因此，Swagger 消除了调用服务时的猜测。

5、如何集成Spring Boot 和ActiveMQ？
    spring-boot-starter-activemq

6、如何实现Spring Boot应用程序的安全性？
    使用Spring Security，其依赖是 spring-boot-starter-security。

7、什么是YAML
    spring-boot中用到的配置文件：application.yml。与属性文件相比，YMAL文件更加结构化，具有分层配置数据。

8、如何在定义端口上运行Spring Boot应用程序？
    application.properties中指定端口：server.port=8080

9、Spring Boot中的监视器是什么？
    Spring Boot Actuator 其依赖是：spring-boot-starter-actuator。可通过REST接口获取监控信息。
    Spring Boot Actuator提供了对单个Spring Boot的监控，信息包含：应用状态、内存、线程、堆栈等等，比较全面的监控了Spring Boot应用的整个生命周期。
    Spring Boot Admin 是一个针对spring-boot的actuator接口进行UI美化封装的监控工具。他可以：在列表中浏览所有被监控spring-boot项目的基本信息，详细的Health信息、内存信息、JVM信息、垃圾回收信息、各种配置信息（比如数据源、缓存列表和命中率）等，还可以直接修改logger的level。

10、什么是Spring Boot？
    Spring功能很多，如果要启动一个Spring项目，就必须添加spring配置，Maven依赖关系。
    Spring Boot建立在现有spring框架之上，使用spring启动，可以避免复杂的配置。
    避免大量的Maven导入和各个版本冲突。

11、DevTools
    热部署：应用启动后会把编译好的Class文件加载到虚拟机中，正常情况下项目修改了源文件是需要全部重新编译并加载（需要重启应用），而热部署就是监听Class文件的变动，
    只把发生修改的Class重新加载，而不是重新启动应用。
    spring-boot-devtools的模块来使Spring Boot应用支持热部署，提高开发者的开发效率，无需手动重启Spring Boot应用。
    https://blog.csdn.net/jaydenwang5310/article/details/78738847

    实现热部署的两种方式：1）spring-boot-devtools 2）Spring Loaded
    1）
       类文件热部署：每当类路径中的文件发生更改时，DevTools会自动重新启动正在运行的应用程序，并应用新的更改。重启仍然需要花费很多时间，但是DevTools使用两个类加载器 base 和 restart，
                    base类加载器加载不更改的类，每当触发重启时，都会重新启动并重新创建restart的类加载器。这样重新启动应用程序速度比平常快得多。
       页面热部署：这个可以直接在application.properties文件中配置spring.thymeleaf.cache=false来实现。不然要修改模板文件后还要重启。
       修改类–>保存：应用会重启
       修改配置文件–>保存：应用会重启
       修改页面–>保存：应用不会重启，但会重新加载，页面会刷新（原理是将spring.thymeleaf.cache设为false，参考:Spring Boot配置模板引擎）
    2）Spring Loaded