Minor GC 和 Full GC。
stop the world 在独占式的垃圾回收器中，整个应用程序会被停止，直到垃圾回收的完成。
GC耗时长、GC频率高则必须优化。
以下不需要优化：
    1、Minor GC执行时间不到50ms。
    2、Minor GC执行不频繁，约10秒一次。
    3、Full GC执行时间不到1s。
    4、Full GC执行频率不算频繁，不低于10分钟一次。

需要关注的参数：
1、当前使用的垃圾收集器
2、Java堆的大小
3、新生代、老年代、永久代的大小
4、Minor GC的持续时间
5、Minor GC的频率
6、Full GC的持续时间
7、Full GC的频率
8、垃圾收集前后Java堆、新生代、老年代、永久代的占用量

GC垃圾回收报告分析
参数：
-verbosegc 记录每次gc的日志
-XX:+PrintGCDetails 打印GC详细信息
-XX:+PrintGC 打印GC信息
-XX:+PrintGCTimeStamps 打印时间戳
-XX:+PrintHeapAtGC 打印堆信息
-Xloggc:/home/admin/logs/gc.log gc日志位置

JDK版本默认垃圾收集器
jdk1.7 默认垃圾收集器Parallel Scavenge（新生代）+Serial Old（老年代）
jdk1.8 默认垃圾收集器Parallel Scavenge（新生代）+Serial Old（老年代）
jdk1.9 默认垃圾收集器G1
jdk10 默认垃圾收集器G1

==============================================
调优目标
期望垃圾回收频率减少，回收中断时间减少。

java堆参数：
-Xmx 最大堆大小
-Xms 最小堆大小

年轻代大小定义参数：
-Xmn 年轻代大小
-XX:NewRaito 年轻代和年老代的比例值
-XX:SurvivorRaito 设置年轻代中Eden和Survivor区的比值

持久代大小定义参数：
-XX:PermSize 启动时候持久代大小
-XX:MaxPermSize 持久代最大可占用大小

=================================================
为什么要分代
不同对象的生命周期是不一样的，不同生命周期的对象可以采用不同的收集方式，以便提高回收效率。

=================================================
年轻代中的对象特点是生存期短，对象增长快。
老年代中的对象特点是生存期长，对象增长慢。
问题：
1、Minor GC 的特点是执行频繁，中断时间短，如果 eden 太小，导致 Minor GC 执行太过频繁，则中断也会频繁，并且会让生存期短的对象进入到老年代。
2、如果 eden 太大，但是对象生成快，很快eden就爆满，虽说Minor GC 执行频率变慢，但是中断时间会变长。
3、如果老年代太大，则会导致Full GC时间过长。
4、如果老年代太小，则会导致Full GC频繁。
=================================================
1、GC时间长
    1）减内存
    2）加CPU
    3）并行GC或并发GC
2、GC频繁
    1）加内存
    2）控制并发
    3）
1、降低Full GC执行频率：
    1）System.gc()调用后，jvm会在适当的时候 Full GC。应该让jvm自己自己去管理内存。可通过-XX:+ DisableExplicitGC来禁止RMI调用System.gc。
    2）Minor GC后总是有对象不断的进入老年代
    https://blog.csdn.net/toella/article/details/7310380
    https://www.cnblogs.com/andy-zhou/p/5327288.html
    https://blog.csdn.net/varyall/article/details/81634272

    垃圾回收器：
    https://www.cnblogs.com/chenpt/p/9803298.html

    压测：
    https://blog.csdn.net/u010486495/article/details/51994833
=================================================================
垃圾回收器
1、Serial 收集器
    1）单线程
    2）stop the world
    3）适用于Client模式下的虚拟机
    4）新生代收集器，采用复制算法

2、ParNew 收集器
    1）Serial 的多线程版本

3、Parallel Scavenge 收集器
    1）类似ParNew
    2）目标是达到一个可控制的吞吐量，可自适应调节
    3）XX:MaxGCPauseMillis 控制最大的垃圾收集停顿时间
    4）XX:GCRatio 直接设置吞吐量的大小。

4、Serial Old 收集器
    1）Serial的老年代版本
    2）标记整理

5、Paralle Old 收集器
    1）Parallel Scavenge收集器的老年代版本
    2）多线程
    3）标记整理

6、CMS 收集器
    1）老年代，标记清除
    2）并发收集
    3）回收线程与用户线程一起并发执行
    4）标记-清除会产生空间碎片，导致大对象无法分配空间，不得不提前Full GC。

7、G1 收集器
    https://segmentfault.com/a/1190000017166003
    1）面向服务端应用的垃圾收集器
    2）新生代、老年代不区分。整个java堆。
    3）并发收集器，大部分收集阶段不需要挂起应用程序。
    4）G1将整个堆划分为一个个大小相等的小块（region），每一块的内存都是连续的，每一块也会有eden、survior、old三种角色。
    过程：
    初始标记：仅标记GC Roots能直接到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象。（需要线程停顿，但耗时很短。）
    并发标记：从GC Roots开始对堆中对象进行可达性分析，找出存活对象。（耗时较长，但可与用户程序并发执行）
    最终标记：为了修正在并发标记期间因用户程序执行而导致标记产生变化的那一部分标记记录。且对象的变化记录在线程Remembered Set  Logs里面，把Remembered Set  Logs里面的数据合并到Remembered Set中。（需要线程停顿，但可并行执行。）
    筛选回收：对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。（可并发执行）

    特点：
    在 G1 中，目标停顿时间非常非常重要，用 -XX:MaxGCPauseMillis=200 指定期望的停顿时间。
    G1 使用了停顿预测模型来满足用户指定的停顿时间目标，并基于目标来选择进行垃圾回收的区块数量。G1 采用增量回收的方式，每次回收一些区块，而不是整堆回收。
    我们要知道 G1 不是一个实时收集器，它会尽力满足我们的停顿时间要求，但也不是绝对的，它基于之前垃圾收集的数据统计，估计出在用户指定的停顿时间内能收集多少个区块。