装饰器模式
允许向一个现有的对象添加新的功能，同时又不改变其结构。

意图：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式相比生成子类更为灵活。
优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。
缺点：多层装饰比较复杂。

接口：
public interface Logger {
    public void log();
}

原有功能：
public class LoggerCloud implements Logger {
 
    @Override
    public void log() {
        System.out.println("Log in Cloud");
    }
}

public class LoggerFileSystem implements Logger {
    @Override
    public void log() {
        System.out.println("Log in FileSystem");
    }
}

要在LoggerCloud和LoggerFileSystem中添加功能
为Logger编写一个装饰器，拓展log()的功能，这个装饰类要实现Logger接口并且拥有一个Logger成员
public class Decorator implements Logger {
 
    protected Logger logger;
 
    Decorator(Logger logger){
        this.logger=logger;
    }
 
    @Override
    public void log() {
        if(logger!=null){
            logger.log();
        }
    }
}

FunctionOne和FunctionTwo的newFunction()即我们想要添加的功能
public class FunctionTwo extends Decorator {
 
    FunctionTwo(Logger logger) {
        super(logger);
    }
 
    @Override
    public void log() {
        super.log();
        functionTwo();
    }
 
    public void functionTwo(){
        System.out.println("new function two");
    }
}
使用：
public class Main {
    public static void main(String[] args) {
        Logger logger = new LoggerCloud();
        logger.log();
        System.out.println();
        Logger logger1 = new FunctionOne(logger);
        logger1.log();
        System.out.println();
        Logger logger2 = new FunctionTwo(logger1);
        logger2.log();
    }
}
https://blog.csdn.net/chaos_le/article/details/81007164