13.1.0 请解释一下什么是Nginx?
    https://blog.csdn.net/qq_36125138/article/details/84144932
    一个web服务器。主要用途：
    1）反向代理
        nginx接受internet上的连接请求，然后将请求转发给内部网络上的服务器。并将内部服务器上得到结果返回给internet上请求连接的客户端。
    2）负载均衡
        将请求分摊到其他服务器上。
    3）HTTP服务器
        nginx本身就是一个静态资源的服务器。当只有静态资源的时候，就可以使用nginx来做服务器。
    4）正向代理
13.1.1 请列举Nginx的一些特性?

13.1.2 请列举Nginx和Apache 之间的不同点?
        1）Nginx对静态资源的处理比Apache强。
        2）Nginx负载能力比Apache高很多。（前端Nginx抗并发，后端Apache集群）
        3）Nginx是异步的，多个连接可以对应一个进程。Apache是同步多进程模型。
13.1.3 请解释Nginx如何处理HTTP请求。

13.1.4 在Nginx中，如何使用未定义的服务器名称来阻止处理请求?
        Server {
            listen  80;
            server_name  "" ;
            return  444;
        }
        这里，服务器名被保留为一个空字符串，它将在没有“主机”头字段的情况下匹配请求，而一个特殊的Nginx的非标准代码444被返回，从而终止连接。
13.1.5 使用“反向代理服务器”的优点是什么?
        可以打造后端服务集群
13.1.6 请列举Nginx服务器的最佳用途。
        http服务器，反向代理，负载均衡。
13.1.7 请解释Nginx服务器上的Master和Worker进程分别是什么?
        多进程的工作模式。
        1) Nginx在启动后，会有一个master进程和多个相互独立的worker进程.
        2) 有连接过来时, master向各个worker进程发信号,每个进程都可能来处理这个连接.
        3) master进程能监控worker进程的运行状态, 当worker进程退出后(异常情况下), 会自动启动新的worker进程.
        worker进程数, 一般会设置成机器cpu核数. 因为更多的worker数, 只会导致进程相互竞争cpu, 从而带来不必要的上下文.
13.1.8 请解释你如何通过不同于80的端口开启Nginx?
        server { 
            listen 81; 
        }
13.1.9 请解释是否有可能将Nginx的错误替换为502错误、503?
        1) 创建自己的404.html页面
        2) 更改nginx.conf, 在http块中加入fastcgi_intercept_errors on;
        3) 更改nginx.conf, 在server块中加入error_page 404 = /404.html
        其他的错误也可以使用同样的方法来配置:
        error_page 500 502 503 504 = /50x.html
13.2.0 在Nginx中，解释如何在URL中保留双斜线?
        在http,server块中使用 merge_slashes off
13.2.1 请解释ngx_http_upstream_module的作用是什么?

13.2.2 请解释什么是C10K问题，后来是怎么解决的？
        https://segmentfault.com/a/1190000007240744
13.2.3 请陈述stub_status和sub_filter指令的作用是什么?
13.2.4 解释Nginx是否支持将请求压缩到上游?
13.2.5 解释如何在Nginx中获得当前的时间?
13.2.6 用Nginx服务器解释-s的目的是什么?
13.2.7 解释如何在Nginx服务器上添加模块?
13.2.8 nginx中多个work进程是如何监听同一个端口的？如何处理客户连接的惊群问题？
        惊群是多个子进程在同一时刻监听同一个端口引起的.
        nginx解决方法: 同一时刻只能有唯一一个worker子进程监听web端口, 此时新连接事件只能唤醒唯一正在监听端口的worker子进程.
13.2.9 nginx程序的热更新是如何做的？