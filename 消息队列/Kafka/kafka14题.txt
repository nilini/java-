1、请说明什么是Apache Kafka?

Apache Kafka是由Apache开发的一种发布订阅消息系统，它是一个分布式的、分区的和重复的日志服务。

2、请说明什么是传统的消息传递方法?

传统的消息传递方法包括两种：

·排队：在队列中，一组用户可以从服务器中读取消息，每条消息都发送给其中一个人。

·发布-订阅：在这个模型中，消息被广播给所有的用户。

3、请说明Kafka相对传统技术有什么优势?

Apache Kafka与传统的消息传递技术相比优势之处在于：

快速:单一的Kafka代理可以处理成千上万的客户端，每秒处理数兆字节的读写操作。

可伸缩:在一组机器上对数据进行分区和简化，以支持更大的数据

持久:消息是持久性的，并在集群中进行复制，以防止数据丢失。

设计:它提供了容错保证和持久性

4、在Kafka中broker的意义是什么?

在Kafka集群中，broker术语用于引用服务器。

5、Kafka服务器能接收到的最大信息是多少?

Kafka服务器可以接收到的消息的最大大小是1000000字节。

6、解释Kafka的Zookeeper是什么?我们可以在没有Zookeeper的情况下使用Kafka吗?

Zookeeper是一个开放源码的、高性能的协调服务，它用于Kafka的分布式应用。

不，不可能越过Zookeeper，直接联系Kafka broker。一旦Zookeeper停止工作，它就不能服务客户端请求。

·Zookeeper主要用于在集群中不同节点之间进行通信

·在Kafka中，它被用于提交偏移量，因此如果节点在任何情况下都失败了，它都可以从之前提交的偏移量中获取

·除此之外，它还执行其他活动，如: leader检测、分布式同步、配置管理、识别新节点何时离开或连接、集群、节点实时状态等等。

7、解释Kafka的用户如何消费信息?

在Kafka中传递消息是通过使用sendfile API完成的。它支持将字节从套接口转移到磁盘，通过内核空间保存副本，并在内核用户之间调用内核。

8、解释如何提高远程用户的吞吐量?

如果用户位于与broker不同的数据中心，则可能需要调优套接口缓冲区大小，以对长网络延迟进行摊销。

9、解释一下，在数据制作过程中，你如何能从Kafka得到准确的信息?

在数据中，为了精确地获得Kafka的消息，你必须遵循两件事: 在数据消耗期间避免重复，在数据生产过程中避免重复。

这里有两种方法，可以在数据生成时准确地获得一个语义:

·每个分区使用一个单独的写入器，每当你发现一个网络错误，检查该分区中的最后一条消息，以查看您的最后一次写入是否成功

·在消息中包含一个主键(UUID或其他)，并在用户中进行反复制

10、解释如何减少ISR中的扰动?broker什么时候离开ISR?

ISR是一组与leaders完全同步的消息副本，也就是说ISR中包含了所有提交的消息。ISR应该总是包含所有的副本，直到出现真正的故障。如果一个副本从leader中脱离出来，将会从ISR中删除。

11、Kafka为什么需要复制?

Kafka的信息复制确保了任何已发布的消息不会丢失，并且可以在机器错误、程序错误或更常见些的软件升级中使用。

12、如果副本在ISR中停留了很长时间表明什么?

如果一个副本在ISR中保留了很长一段时间，那么它就表明，跟踪器无法像在leader收集数据那样快速地获取数据。

13、请说明如果首选的副本不在ISR中会发生什么?

如果首选的副本不在ISR中，控制器将无法将leadership转移到首选的副本。

14、有可能在生产后发生消息偏移吗?

在大多数队列系统中，作为生产者的类无法做到这一点，它的作用是触发并忘记消息。broker将完成剩下的工作，比如使用id进行适当的元数据处理、偏移量等。

作为消息的用户，你可以从Kafka broker中获得补偿。如果你注视SimpleConsumer类，你会注意到它会获取包括偏移量作为列表的MultiFetchResponse对象。此外，当你对Kafka消息进行迭代时，你会拥有包括偏移量和消息发送的MessageAndOffset对象。

15、Zookeeper在kafka中的作用？
    *1 broker 注册
      broker是分布式部署并且相互之间独立，但是需要有一个注册中心能够将整个集群中的broker管理起来。
      Zookeeper上有个专门用来记录broker服务器列表的节点："/brokers/ids"（/brokers/ids/[0...N]）。
      kafka使用了全局唯一的数字来指代每个broker服务器，不同的broker必须使用不同的broker id进行注册，创建完节点后，每个broker就会将自己的ip地址和端口信息记录到该节点。
      broker创建的节点类型是临时节点，一旦broker宕机，则对应的临时节点也会被自动删除。
    *2 topic 注册
      同一个topic的消息会被分成多个分区并将其分布在多个broker上，这些分区信息及与broker的对应关系也都是由Zookeeper在维护，由于专门的节点来记录："/brokers/topic"
      每个topic都会以"/brokers/topic/[topic]"的形式被记录，如：/brokers/topic/login 、 /broker/topic/search等。
      broker服务器启动后，会到对应topic节点（/brokers/topic）上注册自己的broker id并写入针对该topic的分区众数，如/brokers/topic/login/3->2。这个节点表示broker id为
      3的一个broker服务器，对与“login”这个topic的消息，提供了2个分区进行消息存储，同样，这个分区节点也是临时节点。
    *3 生产者负载均衡
      同一个topic消息会被分区并将其分布在多个broker上，生产者需要将消息合理地发送到这些分布式的broker上，那么如何实现生产者的负载均衡，Kafka支持传统的四层负载均衡，
      也支持Zookeeper方式实现负载均衡。
      1、四层负载均衡。根据生产者的IP地址和端口来为其确定一个相关联的broker。
      2、使用Zookeeper进行负载均衡，由于每个broker启动时，都会完成broker注册过程，生产者会通过该节点的变化来动态感知broker服务列表的变更，这样就可以实现动态的负载均衡机制。
    *4 与生产者类似，Kafka中的消费者同样需要进行负载均衡来实现多个消费者合理地从对应的broker服务器上接收消息，每个消费者分组包含若干个消费者，每条消息都只会发送给分组中的一个
       消费者，不同的消费者分组消费自己特定的topic下面的消息，互不干扰。
    *5 分区与消费者的关系 
      消费组 (Consumer Group)：
      consumer group 下有多个 Consumer（消费者）。
      对于每个消费者组 (Consumer Group)，Kafka都会为其分配一个全局唯一的Group ID，Group 内部的所有消费者共享该 ID。订阅的topic下的每个分区只能分配给某个 group 下的一个consumer(当然该分区还可以被分配给其他group)。
      同时，Kafka为每个消费者分配一个Consumer ID，通常采用"Hostname:UUID"形式表示。
      在Kafka中，规定了每个消息分区 只能被同组的一个消费者进行消费，因此，需要在 Zookeeper 上记录 消息分区 与 Consumer 之间的关系，每个消费者一旦确定了对一个消息分区的消费权力，需要将其Consumer ID 写入到 Zookeeper 对应消息分区的临时节点上，例如：
      /consumers/[group_id]/owners/[topic]/[broker_id-partition_id]
      其中，[broker_id-partition_id]就是一个 消息分区 的标识，节点内容就是该 消息分区 上 消费者的Consumer ID。
    *6 消息消费进度offset记录
      在消费者对指定消息分区进行消息消费的过程中，需要定时地将分区消息的消费进度Offset记录到Zookeeper上，以便在该消费者进行重启或者其他消费者重新接管该消息分区的消息消费后，能够从之前的进度开始继续进行消息消费。
      Offset在Zookeeper中由一个专门节点进行记录，其节点路径为: /consumers/[group_id]/offsets/[topic]/[broker_id-partition_id]
      节点内容就是Offset的值。
    *7 消费者注册
       消费者服务器在初始化启动时加入消费者分组的步骤如下
       注册到消费者分组。每个消费者服务器启动时，都会到Zookeeper的指定节点下创建一个属于自己的消费者节点，例如/consumers/[group_id]/ids/[consumer_id]，完成节点创建后，消费者就会将自己订阅的Topic信息写入该临时节点。
       对 消费者分组 中的 消费者 的变化注册监听。每个 消费者 都需要关注所属 消费者分组 中其他消费者服务器的变化情况，即对/consumers/[group_id]/ids节点注册子节点变化的Watcher监听，一旦发现消费者新增或减少，就触发消费者的负载均衡。
       对Broker服务器变化注册监听。消费者需要对/broker/ids/[0-N]中的节点进行监听，如果发现Broker服务器列表发生变化，那么就根据具体情况来决定是否需要进行消费者负载均衡。
       进行消费者负载均衡。为了让同一个Topic下不同分区的消息尽量均衡地被多个 消费者 消费而进行 消费者 与 消息 分区分配的过程，通常，对于一个消费者分组，如果组内的消费者服务器发生变更或Broker服务器发生变更，会发出消费者负载均衡。




      https://www.jianshu.com/p/a036405f989c
      