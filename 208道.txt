一、Java 基础

1.JDK 和 JRE 有什么区别？

2.== 和 equals 的区别是什么？

3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？

4.final 在 java 中有什么作用？

5.java 中的 Math.round(-1.5) 等于多少？

6.String 属于基础的数据类型吗？

7.java 中操作字符串都有哪些类？它们之间有什么区别？

8.String str="i"与 String str=new String("i")一样吗？

9.如何将字符串反转？

10.String 类的常用方法都有那些？

11.抽象类必须要有抽象方法吗？

12.普通类和抽象类有哪些区别？

13.抽象类能使用 final 修饰吗？

14.接口和抽象类有什么区别？

15.java 中 IO 流分为几种？

16.BIO、NIO、AIO 有什么区别？

17.Files的常用方法都有哪些？

二、容器

18.java 容器都有哪些？

19.Collection 和 Collections 有什么区别？

20.List、Set、Map 之间的区别是什么？

21.HashMap 和 Hashtable 有什么区别？

22.如何决定使用 HashMap 还是 TreeMap？

23.说一下 HashMap 的实现原理？

24.说一下 HashSet 的实现原理？

25.ArrayList 和 LinkedList 的区别是什么？

26.如何实现数组和 List 之间的转换？

27.ArrayList 和 Vector 的区别是什么？

28.Array 和 ArrayList 有何区别？

29.在 Queue 中 poll()和 remove()有什么区别？

30.哪些集合类是线程安全的？

31.迭代器 Iterator 是什么？

32.Iterator 怎么使用？有什么特点？

33.Iterator 和 ListIterator 有什么区别？

34.怎么确保一个集合不能被修改？

三、多线程

35.并行和并发有什么区别？

36.线程和进程的区别？

37.守护线程是什么？

38.创建线程有哪几种方式？

39.说一下 runnable 和 callable 有什么区别？

40.线程有哪些状态？

41.sleep() 和 wait() 有什么区别？

42.notify()和 notifyAll()有什么区别？

43.线程的 run()和 start()有什么区别？

44.创建线程池有哪几种方式？

45.线程池都有哪些状态？

46.线程池中 submit()和 execute()方法有什么区别？

47.在 java 程序中怎么保证多线程的运行安全？

48.多线程锁的升级原理是什么？

49.什么是死锁？

50.怎么防止死锁？

51.ThreadLocal 是什么？有哪些使用场景？

52.说一下 synchronized 底层实现原理？

53.synchronized 和 volatile 的区别是什么？

54.synchronized 和 Lock 有什么区别？

55.synchronized 和 ReentrantLock 区别是什么？

56.说一下 atomic 的原理？

四、反射

57.什么是反射？

58.什么是 java 序列化？什么情况下需要序列化？

59.动态代理是什么？有哪些应用？

60.怎么实现动态代理？

五、对象拷贝

61.为什么要使用克隆？

62.如何实现对象克隆？

63.深拷贝和浅拷贝区别是什么？

六、Java Web

64.jsp 和 servlet 有什么区别？

65.jsp 有哪些内置对象？作用分别是什么？

66.说一下 jsp 的 4 种作用域？

67.session 和 cookie 有什么区别？

68.说一下 session 的工作原理？

69.如果客户端禁止 cookie 能实现 session 还能用吗？

70.spring mvc 和 struts 的区别是什么？

71.如何避免 sql 注入？

72.什么是 XSS 攻击，如何避免？

73.什么是 CSRF 攻击，如何避免？

七、异常

74.throw 和 throws 的区别？

75.final、finally、finalize 有什么区别？

76.try-catch-finally 中哪个部分可以省略？

77.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？

78.常见的异常类有哪些？

八、网络

79.http 响应码 301 和 302 代表的是什么？有什么区别？

80.forward 和 redirect 的区别？

81.简述 tcp 和 udp的区别？

82.tcp 为什么要三次握手，两次不行吗？为什么？

83.说一下 tcp 粘包是怎么产生的？

84.OSI 的七层模型都有哪些？

85.get 和 post 请求有哪些区别？

86.如何实现跨域？

87.说一下 JSONP 实现原理？

九、设计模式

88.说一下你熟悉的设计模式？

89.简单工厂和抽象工厂有什么区别？

十、Spring/Spring MVC

90.为什么要使用 spring？

91.解释一下什么是 aop？

92.解释一下什么是 ioc？

93.spring 有哪些主要模块？

94.spring 常用的注入方式有哪些？

95.spring 中的 bean 是线程安全的吗？

96.spring 支持几种 bean 的作用域？

97.spring 自动装配 bean 有哪些方式？

98.spring 事务实现方式有哪些？

99.说一下 spring 的事务隔离？

100.说一下 spring mvc 运行流程？

101.spring mvc 有哪些组件？

102.@RequestMapping 的作用是什么？

103.@Autowired 的作用是什么？

十一、Spring Boot/Spring Cloud

104.什么是 spring boot？

105.为什么要用 spring boot？

106.spring boot 核心配置文件是什么？

107.spring boot 配置文件有哪几种类型？它们有什么区别？

108.spring boot 有哪些方式可以实现热部署？

109.jpa 和 hibernate 有什么区别？

110.什么是 spring cloud？

111.spring cloud 断路器的作用是什么？

112.spring cloud 的核心组件有哪些？

十二、Hibernate

113.为什么要使用 hibernate？

114.什么是 ORM 框架？

115.hibernate 中如何在控制台查看打印的 sql 语句？

116.hibernate 有几种查询方式？

117.hibernate 实体类可以被定义为 final 吗？

118.在 hibernate 中使用 Integer 和 int 做映射有什么区别？

119.hibernate 是如何工作的？

120.get()和 load()的区别？

121.说一下 hibernate 的缓存机制？

122.hibernate 对象有哪些状态？

123.在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？

124.hibernate 实体类必须要有无参构造函数吗？为什么？

十三、Mybatis

125.mybatis 中 #{}和 ${}的区别是什么？

126.mybatis 有几种分页方式？

127.RowBounds 是一次性查询全部结果吗？为什么？

128.mybatis 逻辑分页和物理分页的区别是什么？

129.mybatis 是否支持延迟加载？延迟加载的原理是什么？

130.说一下 mybatis 的一级缓存和二级缓存？

131.mybatis 和 hibernate 的区别有哪些？

132.mybatis 有哪些执行器（Executor）？

133.mybatis 分页插件的实现原理是什么？

134.mybatis 如何编写一个自定义插件？

十四、RabbitMQ

135.rabbitmq 的使用场景有哪些？

136.rabbitmq 有哪些重要的角色？

137.rabbitmq 有哪些重要的组件？

138.rabbitmq 中 vhost 的作用是什么？

139.rabbitmq 的消息是怎么发送的？

140.rabbitmq 怎么保证消息的稳定性？

141.rabbitmq 怎么避免消息丢失？

142.要保证消息持久化成功的条件有哪些？

143.rabbitmq 持久化有什么缺点？

144.rabbitmq 有几种广播类型？

145.rabbitmq 怎么实现延迟消息队列？

146.rabbitmq 集群有什么用？

147.rabbitmq 节点的类型有哪些？

148.rabbitmq 集群搭建需要注意哪些问题？

149.rabbitmq 每个节点是其他节点的完整拷贝吗？为什么？

150.rabbitmq 集群中唯一一个磁盘节点崩溃了会发生什么情况？

151.rabbitmq 对集群节点停止顺序有要求吗？

十五、Kafka

152.kafka 可以脱离 zookeeper 单独使用吗？为什么？

153.kafka 有几种数据保留的策略？

154.kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？

155.什么情况会导致 kafka 运行变慢？

156.使用 kafka 集群需要注意什么？

十六、Zookeeper

157.zookeeper 是什么？

158.zookeeper 都有哪些功能？

159.zookeeper 有几种部署模式？

160.zookeeper 怎么保证主从节点的状态同步？

161.集群中为什么要有主节点？

162.集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？

163.说一下 zookeeper 的通知机制？

十七、MySql

164.数据库的三范式是什么？

165.一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？

166.如何获取当前数据库版本？

167.说一下 ACID 是什么？

168.char 和 varchar 的区别是什么？

169.float 和 double 的区别是什么？

170.mysql 的内连接、左连接、右连接有什么区别？

171.mysql 索引是怎么实现的？

172.怎么验证 mysql 的索引是否满足需求？

173.说一下数据库的事务隔离？

174.说一下 mysql 常用的引擎？

175.说一下 mysql 的行锁和表锁？

176.说一下乐观锁和悲观锁？

177.mysql 问题排查都有哪些手段？

178.如何做 mysql 的性能优化？

十八、Redis

179.redis 是什么？都有哪些使用场景？

180.redis 有哪些功能？

181.redis 和 memecache 有什么区别？

182.redis 为什么是单线程的？

183.什么是缓存穿透？怎么解决？

184.redis 支持的数据类型有哪些？

185.redis 支持的 java 客户端都有哪些？

186.jedis 和 redisson 有哪些区别？

187.怎么保证缓存和数据库数据的一致性？

188.redis 持久化有几种方式？

189.redis 怎么实现分布式锁？

190.redis 分布式锁有什么缺陷？

191.redis 如何做内存优化？

192.redis 淘汰策略有哪些？

193.redis 常见的性能问题有哪些？该如何解决？

十九、JVM

194.说一下 jvm 的主要组成部分？及其作用？

195.说一下 jvm 运行时数据区？

196.说一下堆栈的区别？

197.队列和栈是什么？有什么区别？

198.什么是双亲委派模型？

199.说一下类加载的执行过程？

200.怎么判断对象是否可以被回收？

201.java 中都有哪些引用类型？

202.说一下 jvm 有哪些垃圾回收算法？

203.说一下 jvm 有哪些垃圾回收器？

204.详细介绍一下 CMS 垃圾回收器？

205.新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？

206.简述分代垃圾回收器是怎么工作的？

207.说一下 jvm 调优的工具？

208.常用的 jvm 调优的参数都有哪些？
=========================================================================
1. JDK 和 JRE 有什么区别？
    JRE是java运行环境，有jvm，普通用户运行java。
    JDK是java开发包，包括jre。还有一些其他的开发工具。开发者使用。

2. == 和 equals 的区别是什么？
    == 比较地址
    equals()交给开发者自己去定义比较规则，Object中比较地址，String继承自Object并重写了equals，比较值。基本类型包装类中比较值。

3. 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？
    hashCode() 和 equals()都可以由开发者重写。
    官方原则：1、两个对象equals相等，hashCode就要相等。
             2、两个对象hashCode相等，不一定要求equals相等。

4.final 在 java 中有什么作用？
    final类不能被继承。
    final方法不能被重写。
    final成员变量必须声明的时候赋值或在构造函数中赋值。
    final变量不能被再次赋值。引用的内容可以变化。
    String和Integer都是final修饰的。为了安全和效率，用的多，非常底层的一个类。
    被final修饰的函数会被直接插入到函数调用处，减少了函数调用的次数（类内部有个函数签名和函数地址的映射表）。但替换太多会导致内嵌之后的代码长度大大增加。增加了jvm解释字节码的时间。
5.java 中的 Math.round(-1.5) 等于多少？
    Math.round(-10.5)加0.5向下取整：-10
    Math.ceil(-10.2) 取大 -10
    Math.floor(-10.2) 取小 -11
6.String 属于基础的数据类型吗？
    String不属于基本数据类型。
    基本数据类型：byte、short、int、long、float、double、char、boolean
    byte: 1字节
    short: 2字节
    int：4字节
    long: 8字节
    float: 4字节
    double: 8字节
    char: 2字节
7.java 中操作字符串都有哪些类？它们之间有什么区别？
    String、StringBuilder、StringBuffer
    String是不可变类，被声明为final，所有属性也都是final，对String对象的操作都会产生一个新的String对象。线程不安全
    StringBuffer的操作在对象上操作。线程安全的可修改字符串序列。
    StringBuilder线程不安全，其余和StringBuffer一样。
    String、StringBuilder、StringBuffer底层是数组实现，JDK 9之前是char数组，之后是byte数组。
    StringBuffer的线程安全是通过在修改数据的方法上都加上synchronized关键字实现的。
    StringBuffer和StringBuilder都继承自AbstractStringBuilder。区别仅仅是方法上有无synchronized。
    字符串缓存：使用intern()方法可以将字符串缓存起来, JVM一般会缓存字符串字面量、字符串常量，即字符串常量池。
               永久代存在时候，字符串常量池在永久代中，其空间优先，基本不会被FullGC之外的垃圾收集照顾到。使用不但会有OOM。
               永久代一出之后，缓存池被放到了堆中，这样就避免了永久代被占满的问题。
               使用JVM参数-XX:+PrintStringTableStatistics可以打印字符串常量池（String table【https://www.jianshu.com/p/5524fce8b08f】）的大小。
               使用JVM参数-XX:StringTableSize=N设置字符串常量池的大小。
               Java 8 update 20中引入的字符串去重的特性，可不显示使用intern()，使用参数-XX:+UseG1GC -XX:+UseStringDeduplication，必须要使用G1垃圾回器。
               字符串去重会去查找那些未被处理的字符串，计算它们的hash值（如果它没在应用的代码中被计算过的话），然后再看是否有别的字符串的hash值和底层的char[]都是一样的。如果找到的话——它会用一个新字符串的char[]来替换掉现有的这个char[]。
               字符串缓存底层使用到了hash表StringTable，是一个固定大小的HashTable，基本你逻辑与java中HashMap相同，也使用拉链法解决碰撞。
    String 自身的演化：低版本的String是char数组来存数组的。java中的char是两个byte大小，拉丁语系的字符根本不需要太宽的char。
                      java 9中引入了Compact Strings的设计，使用byte数组加一个标识编码的coder（LATIN1、StringUTF16）来存储数据。
                      只要有一个字符需要两个以上byte存储，所有的字符都会使用两个byte。
    应用场景
      [A]在字符串内容不经常发生变化的业务场景优先使用String类。例如：常量声明、少量的字符串拼接操作等。如果有大量的字符串内容拼接，避免使用String与String之间的“+”操作，因为这样会产生大量无用的中间对象，耗费空间且执行效率低下（新建对象、回收对象花费大量时间）。
      [B]在频繁进行字符串的运算（如拼接、替换、删除等），并且运行在多线程环境下，建议使用StringBuffer，例如XML解析、HTTP参数解析与封装。
      [C]在频繁进行字符串的运算（如拼接、替换、删除等），并且运行在单线程环境下，建议使用StringBuilder，例如SQL语句拼装、JSON封装等。

8.String str="i"与 String str=new String("i")一样吗？
    不一样，第一个"i"存储在字符串常量池，第二个"i"存储在java堆。

9.如何将字符串反转？
    (1) for循环中str.charAt(i)
    (2) new StringBuilder(str).reverse()。StringBuffer也可以。
    (3) str.toCharArray()
    (4) str.getBytes()

10.String 类的常用方法都有那些？
    str.length()
    str.isEmpty()
    str.trim()
    str.toCharArray()
    str.getBytes()
    str.intern()
    str.compareTo()
    str.concat()
    str.contains()
    str.replace()
    str.split()
    str.indexof()
11.抽象类必须要有抽象方法吗？
    抽象类能继承一个普通类（或抽象类），实现多个接口。
    抽象类和普通类相比只是不能被实例化，只能作为子类的超类。
    抽象类是用来捕捉子类的通用特性的，被用来创建继承层级里子类的模板。
    可以有默认的方法实现。
    抽象类可以有构造方法。
    可以有main方法。
    不必须有抽象方法。
    ===接口===
    接口能实现多个其他接口。
    接口是抽象方法的集合，一个类实现了某个接口就必须实现抽象方法。
    接口抽象方法默认修饰符是public（可以不写），不能使用其他修饰符。
    java 8中接口可以包含具体的方法实现，方法实现必须default修饰。
12.普通类和抽象类有哪些区别？
    抽象类不能被实例化。
    抽象类可以有构造方法。
    抽象类可以有main方法。
    抽象类可以有抽象方法。
13.抽象类能使用 final 修饰吗？
    final修饰的类不能被继承，抽象类只有被继承才能使用。
14.接口和抽象类有什么区别？
    同11
15.java 中 IO 流分为几种？
    字节流：按8位传输。所有文件的村塾都是按字节（byte）存储。字节流可以处理任何类型的IO操作，包括二进制。
    字符流：字符流只能处理字符。包括Unicode字符（字节流不行）
16.BIO、NIO、AIO 有什么区别？  
    同步和异步：同步和异步关注的是消息通信机制。
               同步：发起一个调用，在没得到结果之前，该调用就不返回，但是一旦调用返回，就得到返回值了。调用者主动等待这个调用的结果。
               异步：调用发出后，不管有没有得到结果，该调用直接返回。被调用者其后会通知调用者。
    阻塞与非阻塞：阻塞与非阻塞关注的是程序在等待调用结果时的状态。
                阻塞：调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才返回。
                非阻塞：调用不能立刻得到结果之前，该调用不会阻塞当前线程。
    select与epoll、poll区别：
                
    BIO(同步阻塞IO)：
            服务端：由一个独立的线程负责监听客户端的连接，它每次接收到客户端的连接请求后都会为该客户端创建一个新的线程，这个线程负责与对应的客户端进行数据收发。
            客户端：向服务端发起请求，如果没有响应则会等待或收到拒绝请求。
    AIO(同步非阻塞New IO或Non-Block IO)
            通道Channel：对数据的读写都要通过Channel。
            多路复用器Selector：Selector提供选择已经就绪的任务的能力，selector会不断轮询注册在其上的Channel，如果某个Channel上面发生读或写时间，
                               这个Channel就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey可以获取就绪Channel的集合，进行后续的IO操作。
                               一个Selector可以同时轮询多个Channel，JDK使用epoll()代替了传统的select实现。只要一个线程负责Selector的轮询，就可以接入
                               成千上万的客户端。
                               “负责代替应用查询中所有已注册的通道到操作系统中进行IO事件轮询、管理当前注册的通道集合，定位发生事件的通道等操作”
            代码：
            server:
                ...
                // 打开通道
                ServerSocketChannel server = ServerSocketChannel.open();
                // 设为非阻塞
                server.configureBlocking(false);
                // 绑定端口
                server.bind(new InetSocketAddress(10086));
                // 获得一个selector
                Selector selector = Selector.open();
                // 将通道管理器和该通道绑定，并为该通道注册SelectionKey.OP_ACCEPT事件，注册时间后，
                // 当该事件到达时，selector.select()就会返回，如果该事件没有到达，selector.select()会一直阻塞
                server.register(selector, SelectionKey.OP_ACCEPT)
                Systom.out.pringln("等待客户端连接");

                // 采用轮询的方式监听selector上是否有需要处理的事件，如果有，则进行处理
                while(true){
                    // 当注册的事件到达时，方法返回，否则，该方法会一直阻塞。
                    selector.select();
                    // 获得selector中选中的项的迭代器，选中的项为注册的事件
                    Itreator<SelectionKey> ite = selector.selectedKeys().iterator();
                    while(ite.hashNext()){
                        SelectionKey key = (SelectionKey)ite.next();
                        // 删除已选的key，以防重复处理
                        ite.remove();

                        if(key.isAcceptable()){ // 客户端连接事件
                            ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();
                            // 获得和客户端连接的通道
                            SocketChannel channel = serverSocketChannel.accept();
                            // 设为非阻塞
                            channel.configureBlocking(false);
                            // 在这里可以给客户端发送信息
                            channel.write(ByteBuffer.wrap(new String("客户端你好").getBytes("utf-8")));
                            // 在客户端连接成功之后，为了可以接收到客户端的信息，需要给通道设置读的权限。
                            channel.register(selector, SelectionKey.OP_READ);
                        }else if(key.isReadable()){ // 获得可读事件
                            // 服务器可读信息：得到事件发生的Socket通道
                            SocketChannel channel = (SocketChannel)key.channel();
                            // 创建读取的缓冲区
                            ByteBuffer buffer = ByteBuffer.allocate(512);
                            channel.read(buffer);
                            byte[] data = buffer.array();
                            String msg = new String(data).trim();
                            System.out.println("接收到客户端发来的数据：" + msg);
                        }
                    }
                }
                ...
                将新接入的客户端连接注册到Reactor线程的Selector上，监听读操作。
                异步读取客户端消息到缓冲区。
                将应答消息编码为Buffer，调用SocketChannel的write将消息异步发送给客户端。
    AIO(异步非阻塞IO)：
                采用“订阅-通知”模式：即应用程序向操作系统注册IO监听，然后继续做自己的事。当操作系统发生IO事件，并且准备好数据后，在主动通知应用程序，触发相应的函数。

17.Files的常用方法都有哪些？
    createNewFile() 创建新文件
    mkdirs() 创建新的目录，若父目录不存在，会自动创建
    renameTo(File dest)重命名文件
    isFile()判断是否是文件
    isDirectory() 判断是否是目录
    exists() 判断文件或者目录是否存在
    canRead() 判断文件是否可读
    canWrite() 判断文件是否可写
    isHidden() 判断文件是否隐藏

    getAbsolutePath() 获取绝对路径
    getPath()获取相对路径
    getName()获取文件或目录
    length() 获取文件大小
    lastModified() 获取文件最后一次修改的时间
    list()获取路径表示目录下的所有文件和目录名称
    list(FilenameFilter filter) 获取满足过滤器FilenameFilter条件的所有目录或文件
    listFiles() 获取路径表示目录下的所有文件和目录对象
    listFiles(FilenameFilter filter) 获取满足过滤器FilenameFileter条件的所有目录或文件对象
18.java 容器都有哪些？
35.并行和并发有什么区别？
    单个CPU执行多个线程，多个线程按时间片轮流执行就是并发。每一时刻，只会有一个线程被执行。
    多个CPU同时执行多个线程是并行，同一时刻可以有多个线程在执行。
36.线程和进程的区别？
    进程是资源（cpu、内存等）分配的最小单位，线程是程序执行的最小单位。
    一个进程可以有多个线程。
    进程粒度比线程大。
37.守护线程是什么？
    只有当最后一个非守护线程结束时，守护线程才会随着JVM一同结束。
    GC是守护线程。
    childThread.setDaemon(true);必须在childThread.start();之前。
    在Daemon线程中产生的新线程也是Daemon的。
    java的线程池会将守护线程转换为用户线程。

    public class DeamonTest {
        public static void main(String[] args) {
            Thread mainThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    Thread childThread = new Thread(new ChildThread());
                    // 将childThread设置为守护线程。
                    // mainThread线程退出后，守护线程也即退出
                    childThread.setDaemon(true);
                    childThread.start();
                    System.out.println("DeamonTest.run");
                }
            });
            mainThread.start();
        }
    }   
38.创建线程有哪几种方式？
    1) 继承Thread
    2) 实现Runnable
    3) Callable和FutureTask
    https://www.cnblogs.com/dolphin0520/p/3949310.html
    http://www.importnew.com/30531.html
        1)和2)的缺陷是：在执行完任务之后无法获取执行结果。
        FutureTask实现了Runnable和Future

        public class MyCallable implements Callable<String> {
            private int count = 20;

            @Override
            public String call() throws Exception {
                for (int i = count; i >0 ; i--) {
                    System.out.println(Thread.currentThread().getName()+"当前票数：" + i);
                }
                return "sale out";
            }

            public static void main(String[] args) throws ExecutionException, InterruptedException {
                Callable<String> callable = new MyCallable();
                FutureTask<String> futureTask = new FutureTask<>(callable);
                Thread mThread = new Thread(futureTask);
                Thread mThread2 = new Thread(futureTask);
                Thread mThread3 = new Thread(futureTask);
                mThread.start();
                mThread2.start();
                mThread3.start();
                System.out.println(futureTask.get());
            }
        }
    4)