一、Java 基础

1.JDK 和 JRE 有什么区别？

2.== 和 equals 的区别是什么？

3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？

4.final 在 java 中有什么作用？

5.java 中的 Math.round(-1.5) 等于多少？

6.String 属于基础的数据类型吗？

7.java 中操作字符串都有哪些类？它们之间有什么区别？

8.String str="i"与 String str=new String("i")一样吗？

9.如何将字符串反转？

10.String 类的常用方法都有那些？

11.抽象类必须要有抽象方法吗？

12.普通类和抽象类有哪些区别？

13.抽象类能使用 final 修饰吗？

14.接口和抽象类有什么区别？

15.java 中 IO 流分为几种？

16.BIO、NIO、AIO 有什么区别？

17.Files的常用方法都有哪些？

二、容器

18.java 容器都有哪些？

19.Collection 和 Collections 有什么区别？

20.List、Set、Map 之间的区别是什么？

21.HashMap 和 Hashtable 有什么区别？

22.如何决定使用 HashMap 还是 TreeMap？

23.说一下 HashMap 的实现原理？

24.说一下 HashSet 的实现原理？

25.ArrayList 和 LinkedList 的区别是什么？

26.如何实现数组和 List 之间的转换？

27.ArrayList 和 Vector 的区别是什么？

28.Array 和 ArrayList 有何区别？

29.在 Queue 中 poll()和 remove()有什么区别？

30.哪些集合类是线程安全的？

31.迭代器 Iterator 是什么？

32.Iterator 怎么使用？有什么特点？

33.Iterator 和 ListIterator 有什么区别？

34.怎么确保一个集合不能被修改？

三、多线程

35.并行和并发有什么区别？

36.线程和进程的区别？

37.守护线程是什么？

38.创建线程有哪几种方式？

39.说一下 runnable 和 callable 有什么区别？

40.线程有哪些状态？

41.sleep() 和 wait() 有什么区别？

42.notify()和 notifyAll()有什么区别？

43.线程的 run()和 start()有什么区别？

44.创建线程池有哪几种方式？

45.线程池都有哪些状态？

46.线程池中 submit()和 execute()方法有什么区别？

47.在 java 程序中怎么保证多线程的运行安全？

48.多线程锁的升级原理是什么？

49.什么是死锁？

50.怎么防止死锁？

51.ThreadLocal 是什么？有哪些使用场景？

52.说一下 synchronized 底层实现原理？

53.synchronized 和 volatile 的区别是什么？

54.synchronized 和 Lock 有什么区别？

55.synchronized 和 ReentrantLock 区别是什么？

56.说一下 atomic 的原理？

四、反射

57.什么是反射？

58.什么是 java 序列化？什么情况下需要序列化？

59.动态代理是什么？有哪些应用？

60.怎么实现动态代理？

五、对象拷贝

61.为什么要使用克隆？

62.如何实现对象克隆？

63.深拷贝和浅拷贝区别是什么？

六、Java Web

64.jsp 和 servlet 有什么区别？

65.jsp 有哪些内置对象？作用分别是什么？

66.说一下 jsp 的 4 种作用域？

67.session 和 cookie 有什么区别？

68.说一下 session 的工作原理？

69.如果客户端禁止 cookie 能实现 session 还能用吗？

70.spring mvc 和 struts 的区别是什么？

71.如何避免 sql 注入？

72.什么是 XSS 攻击，如何避免？

73.什么是 CSRF 攻击，如何避免？

七、异常

74.throw 和 throws 的区别？

75.final、finally、finalize 有什么区别？

76.try-catch-finally 中哪个部分可以省略？

77.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？

78.常见的异常类有哪些？

八、网络

79.http 响应码 301 和 302 代表的是什么？有什么区别？

80.forward 和 redirect 的区别？

81.简述 tcp 和 udp的区别？

82.tcp 为什么要三次握手，两次不行吗？为什么？

83.说一下 tcp 粘包是怎么产生的？

84.OSI 的七层模型都有哪些？

85.get 和 post 请求有哪些区别？

86.如何实现跨域？

87.说一下 JSONP 实现原理？

九、设计模式

88.说一下你熟悉的设计模式？

89.简单工厂和抽象工厂有什么区别？

十、Spring/Spring MVC

90.为什么要使用 spring？

91.解释一下什么是 aop？

92.解释一下什么是 ioc？

93.spring 有哪些主要模块？

94.spring 常用的注入方式有哪些？

95.spring 中的 bean 是线程安全的吗？

96.spring 支持几种 bean 的作用域？

97.spring 自动装配 bean 有哪些方式？

98.spring 事务实现方式有哪些？

99.说一下 spring 的事务隔离？

100.说一下 spring mvc 运行流程？

101.spring mvc 有哪些组件？

102.@RequestMapping 的作用是什么？

103.@Autowired 的作用是什么？

十一、Spring Boot/Spring Cloud

104.什么是 spring boot？

105.为什么要用 spring boot？

106.spring boot 核心配置文件是什么？

107.spring boot 配置文件有哪几种类型？它们有什么区别？

108.spring boot 有哪些方式可以实现热部署？

109.jpa 和 hibernate 有什么区别？

110.什么是 spring cloud？

111.spring cloud 断路器的作用是什么？

112.spring cloud 的核心组件有哪些？

十二、Hibernate

113.为什么要使用 hibernate？

114.什么是 ORM 框架？

115.hibernate 中如何在控制台查看打印的 sql 语句？

116.hibernate 有几种查询方式？

117.hibernate 实体类可以被定义为 final 吗？

118.在 hibernate 中使用 Integer 和 int 做映射有什么区别？

119.hibernate 是如何工作的？

120.get()和 load()的区别？

121.说一下 hibernate 的缓存机制？

122.hibernate 对象有哪些状态？

123.在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？

124.hibernate 实体类必须要有无参构造函数吗？为什么？

十三、Mybatis

125.mybatis 中 #{}和 ${}的区别是什么？

126.mybatis 有几种分页方式？

127.RowBounds 是一次性查询全部结果吗？为什么？

128.mybatis 逻辑分页和物理分页的区别是什么？

129.mybatis 是否支持延迟加载？延迟加载的原理是什么？

130.说一下 mybatis 的一级缓存和二级缓存？

131.mybatis 和 hibernate 的区别有哪些？

132.mybatis 有哪些执行器（Executor）？

133.mybatis 分页插件的实现原理是什么？

134.mybatis 如何编写一个自定义插件？

十四、RabbitMQ

135.rabbitmq 的使用场景有哪些？

136.rabbitmq 有哪些重要的角色？

137.rabbitmq 有哪些重要的组件？

138.rabbitmq 中 vhost 的作用是什么？

139.rabbitmq 的消息是怎么发送的？

140.rabbitmq 怎么保证消息的稳定性？

141.rabbitmq 怎么避免消息丢失？

142.要保证消息持久化成功的条件有哪些？

143.rabbitmq 持久化有什么缺点？

144.rabbitmq 有几种广播类型？

145.rabbitmq 怎么实现延迟消息队列？

146.rabbitmq 集群有什么用？

147.rabbitmq 节点的类型有哪些？

148.rabbitmq 集群搭建需要注意哪些问题？

149.rabbitmq 每个节点是其他节点的完整拷贝吗？为什么？

150.rabbitmq 集群中唯一一个磁盘节点崩溃了会发生什么情况？

151.rabbitmq 对集群节点停止顺序有要求吗？

十五、Kafka

152.kafka 可以脱离 zookeeper 单独使用吗？为什么？

153.kafka 有几种数据保留的策略？

154.kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？

155.什么情况会导致 kafka 运行变慢？

156.使用 kafka 集群需要注意什么？

十六、Zookeeper

157.zookeeper 是什么？

158.zookeeper 都有哪些功能？

159.zookeeper 有几种部署模式？

160.zookeeper 怎么保证主从节点的状态同步？

161.集群中为什么要有主节点？

162.集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？

163.说一下 zookeeper 的通知机制？

十七、MySql

164.数据库的三范式是什么？

165.一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？

166.如何获取当前数据库版本？

167.说一下 ACID 是什么？

168.char 和 varchar 的区别是什么？

169.float 和 double 的区别是什么？

170.mysql 的内连接、左连接、右连接有什么区别？

171.mysql 索引是怎么实现的？

172.怎么验证 mysql 的索引是否满足需求？

173.说一下数据库的事务隔离？

174.说一下 mysql 常用的引擎？

175.说一下 mysql 的行锁和表锁？

176.说一下乐观锁和悲观锁？

177.mysql 问题排查都有哪些手段？

178.如何做 mysql 的性能优化？

十八、Redis

179.redis 是什么？都有哪些使用场景？

180.redis 有哪些功能？

181.redis 和 memecache 有什么区别？

182.redis 为什么是单线程的？

183.什么是缓存穿透？怎么解决？

184.redis 支持的数据类型有哪些？

185.redis 支持的 java 客户端都有哪些？

186.jedis 和 redisson 有哪些区别？

187.怎么保证缓存和数据库数据的一致性？

188.redis 持久化有几种方式？

189.redis 怎么实现分布式锁？

190.redis 分布式锁有什么缺陷？

191.redis 如何做内存优化？

192.redis 淘汰策略有哪些？

193.redis 常见的性能问题有哪些？该如何解决？

十九、JVM

194.说一下 jvm 的主要组成部分？及其作用？

195.说一下 jvm 运行时数据区？

196.说一下堆栈的区别？

197.队列和栈是什么？有什么区别？

198.什么是双亲委派模型？

199.说一下类加载的执行过程？

200.怎么判断对象是否可以被回收？

201.java 中都有哪些引用类型？

202.说一下 jvm 有哪些垃圾回收算法？

203.说一下 jvm 有哪些垃圾回收器？

204.详细介绍一下 CMS 垃圾回收器？

205.新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？

206.简述分代垃圾回收器是怎么工作的？

207.说一下 jvm 调优的工具？

208.常用的 jvm 调优的参数都有哪些？
=========================================================================
1. JDK 和 JRE 有什么区别？
    JRE是java运行环境，有jvm，普通用户运行java。
    JDK是java开发包，包括jre。还有一些其他的开发工具。开发者使用。

2. == 和 equals 的区别是什么？
    == 比较地址
    equals()交给开发者自己去定义比较规则，Object中比较地址，String继承自Object并重写了equals，比较值。基本类型包装类中比较值。

3. 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？
    hashCode() 和 equals()都可以由开发者重写。
    官方原则：1、两个对象equals相等，hashCode就要相等。
             2、两个对象hashCode相等，不一定要求equals相等。

4.final 在 java 中有什么作用？
    final类不能被继承。
    final方法不能被重写。
    final成员变量必须声明的时候赋值或在构造函数中赋值。
    final变量不能被再次赋值。引用的内容可以变化。
    String和Integer都是final修饰的。为了安全和效率，用的多，非常底层的一个类。
    被final修饰的函数会被直接插入到函数调用处，减少了函数调用的次数（类内部有个函数签名和函数地址的映射表）。但替换太多会导致内嵌之后的代码长度大大增加。增加了jvm解释字节码的时间。
5.java 中的 Math.round(-1.5) 等于多少？
    Math.round(-10.5)加0.5向下取整：-10
    Math.ceil(-10.2) 取大 -10
    Math.floor(-10.2) 取小 -11
6.String 属于基础的数据类型吗？
    String不属于基本数据类型。
    基本数据类型：byte、short、int、long、float、double、char、boolean
    byte: 1字节
    short: 2字节
    int：4字节
    long: 8字节
    float: 4字节
    double: 8字节
    char: 2字节
7.java 中操作字符串都有哪些类？它们之间有什么区别？
    String、StringBuilder、StringBuffer
    String是不可变类，被声明为final，所有属性也都是final，对String对象的操作都会产生一个新的String对象。线程不安全
    StringBuffer的操作在对象上操作。线程安全的可修改字符串序列。
    StringBuilder线程不安全，其余和StringBuffer一样。
    String、StringBuilder、StringBuffer底层是数组实现，JDK 9之前是char数组，之后是byte数组。
    StringBuffer的线程安全是通过在修改数据的方法上都加上synchronized关键字实现的。
    StringBuffer和StringBuilder都继承自AbstractStringBuilder。区别仅仅是方法上有无synchronized。
    字符串缓存：使用intern()方法可以将字符串缓存起来, JVM一般会缓存字符串字面量、字符串常量，即字符串常量池。
               永久代存在时候，字符串常量池在永久代中，其空间优先，基本不会被FullGC之外的垃圾收集照顾到。使用不但会有OOM。
               永久代一出之后，缓存池被放到了堆中，这样就避免了永久代被占满的问题。
               使用JVM参数-XX:+PrintStringTableStatistics可以打印字符串常量池（String table【https://www.jianshu.com/p/5524fce8b08f】）的大小。
               使用JVM参数-XX:StringTableSize=N设置字符串常量池的大小。
               Java 8 update 20中引入的字符串去重的特性，可不显示使用intern()，使用参数-XX:+UseG1GC -XX:+UseStringDeduplication，必须要使用G1垃圾回器。
               字符串去重会去查找那些未被处理的字符串，计算它们的hash值（如果它没在应用的代码中被计算过的话），然后再看是否有别的字符串的hash值和底层的char[]都是一样的。如果找到的话——它会用一个新字符串的char[]来替换掉现有的这个char[]。
               字符串缓存底层使用到了hash表StringTable，是一个固定大小的HashTable，基本你逻辑与java中HashMap相同，也使用拉链法解决碰撞。
    String 自身的演化：低版本的String是char数组来存数组的。java中的char是两个byte大小，拉丁语系的字符根本不需要太宽的char。
                      java 9中引入了Compact Strings的设计，使用byte数组加一个标识编码的coder（LATIN1、StringUTF16）来存储数据。
                      只要有一个字符需要两个以上byte存储，所有的字符都会使用两个byte。
    应用场景
      [A]在字符串内容不经常发生变化的业务场景优先使用String类。例如：常量声明、少量的字符串拼接操作等。如果有大量的字符串内容拼接，避免使用String与String之间的“+”操作，因为这样会产生大量无用的中间对象，耗费空间且执行效率低下（新建对象、回收对象花费大量时间）。
      [B]在频繁进行字符串的运算（如拼接、替换、删除等），并且运行在多线程环境下，建议使用StringBuffer，例如XML解析、HTTP参数解析与封装。
      [C]在频繁进行字符串的运算（如拼接、替换、删除等），并且运行在单线程环境下，建议使用StringBuilder，例如SQL语句拼装、JSON封装等。

8.String str="i"与 String str=new String("i")一样吗？
    不一样，第一个"i"存储在字符串常量池，第二个"i"存储在java堆。

9.如何将字符串反转？
    (1) for循环中str.charAt(i)
    (2) new StringBuilder(str).reverse()。StringBuffer也可以。
    (3) str.toCharArray()
    (4) str.getBytes()

10.String 类的常用方法都有那些？
    str.length()
    str.isEmpty()
    str.trim()
    str.toCharArray()
    str.getBytes()
    str.intern()
    str.compareTo()
    str.concat()
    str.contains()
    str.replace()
    str.split()
    str.indexof()
11.抽象类必须要有抽象方法吗？
    抽象类能继承一个普通类（或抽象类），实现多个接口。
    抽象类和普通类相比只是不能被实例化，只能作为子类的超类。
    抽象类是用来捕捉子类的通用特性的，被用来创建继承层级里子类的模板。
    可以有默认的方法实现。
    抽象类可以有构造方法。
    可以有main方法。
    不必须有抽象方法。
    ===接口===
    接口能实现多个其他接口。
    接口是抽象方法的集合，一个类实现了某个接口就必须实现抽象方法。
    接口抽象方法默认修饰符是public（可以不写），不能使用其他修饰符。
    java 8中接口可以包含具体的方法实现，方法实现必须default修饰。
12.普通类和抽象类有哪些区别？
    抽象类不能被实例化。
    抽象类可以有构造方法。
    抽象类可以有main方法。
    抽象类可以有抽象方法。
13.抽象类能使用 final 修饰吗？
    final修饰的类不能被继承，抽象类只有被继承才能使用。
14.接口和抽象类有什么区别？
    同11
15.java 中 IO 流分为几种？
    字节流：按8位传输。所有文件的村塾都是按字节（byte）存储。字节流可以处理任何类型的IO操作，包括二进制。
    字符流：字符流只能处理字符。包括Unicode字符（字节流不行）
16.BIO、NIO、AIO 有什么区别？  
    同步和异步：同步和异步关注的是消息通信机制。
               同步：发起一个调用，在没得到结果之前，该调用就不返回，但是一旦调用返回，就得到返回值了。调用者主动等待这个调用的结果。
               异步：调用发出后，不管有没有得到结果，该调用直接返回。被调用者其后会通知调用者。
    阻塞与非阻塞：阻塞与非阻塞关注的是程序在等待调用结果时的状态。
                阻塞：调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才返回。
                非阻塞：调用不能立刻得到结果之前，该调用不会阻塞当前线程。
    select与epoll、poll区别：
                
    BIO(同步阻塞IO)：
            服务端：由一个独立的线程负责监听客户端的连接，它每次接收到客户端的连接请求后都会为该客户端创建一个新的线程，这个线程负责与对应的客户端进行数据收发。
            客户端：向服务端发起请求，如果没有响应则会等待或收到拒绝请求。
    AIO(同步非阻塞New IO或Non-Block IO)
            通道Channel：对数据的读写都要通过Channel。
            多路复用器Selector：Selector提供选择已经就绪的任务的能力，selector会不断轮询注册在其上的Channel，如果某个Channel上面发生读或写时间，
                               这个Channel就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey可以获取就绪Channel的集合，进行后续的IO操作。
                               一个Selector可以同时轮询多个Channel，JDK使用epoll()代替了传统的select实现。只要一个线程负责Selector的轮询，就可以接入
                               成千上万的客户端。
                               “负责代替应用查询中所有已注册的通道到操作系统中进行IO事件轮询、管理当前注册的通道集合，定位发生事件的通道等操作”
            代码：
            server:
                ...
                // 打开通道
                ServerSocketChannel server = ServerSocketChannel.open();
                // 设为非阻塞
                server.configureBlocking(false);
                // 绑定端口
                server.bind(new InetSocketAddress(10086));
                // 获得一个selector
                Selector selector = Selector.open();
                // 将通道管理器和该通道绑定，并为该通道注册SelectionKey.OP_ACCEPT事件，注册时间后，
                // 当该事件到达时，selector.select()就会返回，如果该事件没有到达，selector.select()会一直阻塞
                server.register(selector, SelectionKey.OP_ACCEPT)
                Systom.out.pringln("等待客户端连接");

                // 采用轮询的方式监听selector上是否有需要处理的事件，如果有，则进行处理
                while(true){
                    // 当注册的事件到达时，方法返回，否则，该方法会一直阻塞。
                    selector.select();
                    // 获得selector中选中的项的迭代器，选中的项为注册的事件
                    Itreator<SelectionKey> ite = selector.selectedKeys().iterator();
                    while(ite.hashNext()){
                        SelectionKey key = (SelectionKey)ite.next();
                        // 删除已选的key，以防重复处理
                        ite.remove();

                        if(key.isAcceptable()){ // 客户端连接事件
                            ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();
                            // 获得和客户端连接的通道
                            SocketChannel channel = serverSocketChannel.accept();
                            // 设为非阻塞
                            channel.configureBlocking(false);
                            // 在这里可以给客户端发送信息
                            channel.write(ByteBuffer.wrap(new String("客户端你好").getBytes("utf-8")));
                            // 在客户端连接成功之后，为了可以接收到客户端的信息，需要给通道设置读的权限。
                            channel.register(selector, SelectionKey.OP_READ);
                        }else if(key.isReadable()){ // 获得可读事件
                            // 服务器可读信息：得到事件发生的Socket通道
                            SocketChannel channel = (SocketChannel)key.channel();
                            // 创建读取的缓冲区
                            ByteBuffer buffer = ByteBuffer.allocate(512);
                            channel.read(buffer);
                            byte[] data = buffer.array();
                            String msg = new String(data).trim();
                            System.out.println("接收到客户端发来的数据：" + msg);
                        }
                    }
                }
                ...
                将新接入的客户端连接注册到Reactor线程的Selector上，监听读操作。
                异步读取客户端消息到缓冲区。
                将应答消息编码为Buffer，调用SocketChannel的write将消息异步发送给客户端。
    AIO(异步非阻塞IO)：
                采用“订阅-通知”模式：即应用程序向操作系统注册IO监听，然后继续做自己的事。当操作系统发生IO事件，并且准备好数据后，在主动通知应用程序，触发相应的函数。

17.Files的常用方法都有哪些？
    createNewFile() 创建新文件
    mkdirs() 创建新的目录，若父目录不存在，会自动创建
    renameTo(File dest)重命名文件
    isFile()判断是否是文件
    isDirectory() 判断是否是目录
    exists() 判断文件或者目录是否存在
    canRead() 判断文件是否可读
    canWrite() 判断文件是否可写
    isHidden() 判断文件是否隐藏

    getAbsolutePath() 获取绝对路径
    getPath()获取相对路径
    getName()获取文件或目录
    length() 获取文件大小
    lastModified() 获取文件最后一次修改的时间
    list()获取路径表示目录下的所有文件和目录名称
    list(FilenameFilter filter) 获取满足过滤器FilenameFilter条件的所有目录或文件
    listFiles() 获取路径表示目录下的所有文件和目录对象
    listFiles(FilenameFilter filter) 获取满足过滤器FilenameFileter条件的所有目录或文件对象
18.java 容器都有哪些？
19.Collection 和 Collections 有什么区别？
    Collection是集合类的一个顶级接口。
    Collections是集合类的一个工具类：
        Collections.sort(list) 排序
        Collections.shuffle(list) 混排
        Collections.reverse(list) 反转
        Collections.fill(List list, Object o) 替换所有元素
        Collections.copy(List list1, List list2) 将list2中的元素全部复制到list1中，并覆盖相应索引的元素。
        Collections.min(Collection, Comparator)
        Collections.max(Collection, Comparator) 根据指定比较器产生的顺序，返回指定Collectiond的最小（大）
    Arrays同样也是数组工具类。

35.并行和并发有什么区别？
    单个CPU执行多个线程，多个线程按时间片轮流执行就是并发。每一时刻，只会有一个线程被执行。
    多个CPU同时执行多个线程是并行，同一时刻可以有多个线程在执行。
36.线程和进程的区别？
    进程是资源（cpu、内存等）分配的最小单位，线程是程序执行的最小单位。
    一个进程可以有多个线程。
    进程粒度比线程大。
37.守护线程是什么？
    只有当最后一个非守护线程结束时，守护线程才会随着JVM一同结束。
    GC是守护线程。
    childThread.setDaemon(true);必须在childThread.start();之前。
    在Daemon线程中产生的新线程也是Daemon的。
    java的线程池会将守护线程转换为用户线程。

    public class DeamonTest {
        public static void main(String[] args) {
            Thread mainThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    Thread childThread = new Thread(new ChildThread());
                    // 将childThread设置为守护线程。
                    // mainThread线程退出后，守护线程也即退出
                    childThread.setDaemon(true);
                    childThread.start();
                    System.out.println("DeamonTest.run");
                }
            });
            mainThread.start();
        }
    }   
38.创建线程有哪几种方式？
    1) 继承Thread
    2) 实现Runnable
    3) Callable和FutureTask
        1)和2)的缺陷是：在执行完任务之后无法获取执行结果。
        
        FutureTask是一种可以取消的异步的计算任务。它的计算是通过Callable实现的，等价于可以携带结果的Runnable。
        有三个状态：等待、运行、完成（完成包括所有计算以任意的方式结束(正常结束、取消、异常)）。
        主要方法：
            1、get() 获取结果只有在计算完成时获取，否则一直阻塞直到任务转入完成状态。
    https://www.cnblogs.com/dolphin0520/p/3949310.html
    http://www.importnew.com/30531.html
        
        FutureTask实现了Runnable和Future

        public class MyCallable implements Callable<String> {
            private int count = 20;

            @Override
            public String call() throws Exception {
                for (int i = count; i >0 ; i--) {
                    System.out.println(Thread.currentThread().getName()+"当前票数：" + i);
                }
                return "sale out";
            }

            public static void main(String[] args) throws ExecutionException, InterruptedException {
                Callable<String> callable = new MyCallable();
                FutureTask<String> futureTask = new FutureTask<>(callable);
                Thread mThread = new Thread(futureTask);
                Thread mThread2 = new Thread(futureTask);
                Thread mThread3 = new Thread(futureTask);
                mThread.start();
                mThread2.start();
                mThread3.start();
                System.out.println(futureTask.get());
            }
        }

39.说一下 runnable 和 callable 有什么区别？
    1、Runnable线程体在run()中，callable线程体在call()中。
    2、Callable接口支持返回线程执行结果，通过FutureTask.get()方法获取执行结果，get方法会阻塞直到结果返回。
    3、Runnable没有返回值。Callable + FutureTask 可以获取多线程运行的结果，也可以在等待太长时间没有获取到需要的数据的情况下取消该线程的任务。

40.线程有哪些状态？
    1、新建（NEW）：实现Runnable接口和继承Thread可以得到一个线程类，new一个实例，线程就进入了新建状态，即 start() 之前的状态。
    2、可运行（RUNNABLE）：
            有资格运行，但还没运行，等待调度。
            调用线程的start()方法。
            当前线程的sleep()结束。
            其他线程join()结束。
            调用当前线程的yield()方法。
    3、运行（RUNNING）
            线程调度程序从可运行池中选择一个线程设置为当前线程，这是线程进入运行状态的唯一方式。
    4、阻塞（BLOCKED）
            当前线程调用Thread.sleep()。
            运行在当前线程的其他线程调用join()方法。
            等待用户输入的时候。
    5、死亡（DEAD）
            线程的run()方法完成时，就死去了，死去的线程不能复生。

41.sleep() 和 wait() 有什么区别？
    ====sleep()====
    sleep()是线程类Thread的方法；
    调用sleep()会阻塞线程，直到时间到后再度执行。
    ====wait()====
    而wait()是Object的方法。
    wait要持有锁，只能在同步方法或同步块中调用。调用锁资源的wait()方法。
    调用wait()会释放锁，需要调用notify/notifyAll后重新获取对象锁资源后才能继续执行。
42.notify()和 notifyAll()有什么区别？
    notify()唤醒在此监视器上等待的一个线程。
    notifyAll()唤醒在此监视器上等待的全部线程。
    但都要等到当前线程释放锁之后，被唤醒的线程才会执行。
43.线程的 run()和 start()有什么区别？
    调用Thread的start()方法，可以异步启动线程，但启动的线程不会马上运行，会放到等待队列中等待CPU调度。只有线程被CPU调度才会调用run()方法执行。
    线程的逻辑写在run()。线程创建后只有调用start()之后才能进入可运行状态，等待调度执行。
    可直接调用run()方法。
44.创建线程池有哪几种方式？
45.线程池都有哪些状态？
46.线程池中 submit()和 execute()方法有什么区别？
    创建并开启一个线程开销很大，线程池可以避免频繁创建关闭线程，以缓解性能问题。
    线程在被使用前就存在线程池，执行完任务后，线程返回线程池等待下次使用。
    java通过executor对象来实现自己的线程池模型，可以使用exector接口或其他线程池的实现。
    =============接口Executor==========================
    ```
    简单使用:
    public class mainTest {
        public static void main(String[] args) {
            Executor executor = Executors.newSingleThreadExecutor();
            executor.execute(new Runnable() {
                @Override
                public void run() {
                    System.out.println("mainTest.run");
                }
            });
        }
    }
    ```
    如果有工作线程可用，execute()方法将执行语句，否则就把Runnable任务放进队列，等待线程可用。
    
    Executors类里的工厂方法可以创建很多类型的线程池（最终构建线程池使用ThreadPoolExecutor）：
    newSingleThreadExecutor()：包含单个线程和无界队列的线程池，同一时间只能执行一个任务。
    newFixedThreadPoll()：包含固定数量线程并共享无界队列的线程池；当所有线程处于工作状态，有新任务提交时，任务在队列中等待，直到一个线程变为可用状态。
    newCacheThreadPool()：只有需要时创建新线程的线程池。
    newWorkStealingThreadPool()：基于工作窃取算法的线程池。

    ====================接口ExecutorService===============
    ExecutorService是Executor的子接口，其定义了更多的方法。
    submit()方法可以返回Furute对象。
    
    ===================接口ScheduledExecutorService========
    ScheduledExecutorService是ExecutorService的一个子接口，增加了调度任务的方法。
    sechedule()方法的参数指定执行的方法、延时和TimeUnit
    
    ```
    ScheduledExecutorService executor = Executors.newScheduledThreadPool(10);
    Future<Double> future = executor.schedule(callableTask, 2, TimeUnit.MILLISECONDS); 
    ```
    =================ThreadPoolExecutor和ForkJoinPool==============
    ExecutorService的两个实现。

74.throw 和 throws 的区别？
    throws 是用来声明一个方法可抛出的所有异常信息，throws是将异常声明但不处理，而是将异常往上传，传给调用者。
    throw 抛出一个具体的异常类型。
    一个异常要么向上抛（throws）给调用者去处理，要么自身捕获（try{}catch(Exception e){}），自己去处理
75.final、finally、finalize 有什么区别？
    final修饰的类不能被继承。
    final修饰的成员变量要赋值初始化或在构造方法中赋值。
    final修饰的局部变量必须要赋值初始化，并且不能修改。
    final修饰的方法会被JVM优化。
    GC前对象会调用finalize，可在finalize中将自身（this）赋值给其他变量从而起死回生。
76.try-catch-finally 中哪个部分可以省略？
    1) finally可以省略。finally块最终都会执行。
    2) 关闭资源的操作放到finally中，因为try块中抛出异常后不会继续向下执行。程序可能无法到达try的尾部，但一定会到达finally。
    3) 不要捕获Throwable，Throwable是所有exceptions和errors的父类。不仅捕获所有异常而且捕获所有错误。
       这些错误由JVM抛出，用来表明不打算应用程序处理的严重错误。比如OutOfMemoryError和StackOverflowError。
       折中方法是在底层捕获Throwable，其他层级捕获Exception。
    4) try-with-resource 自动关闭外部资源。资源句柄要实现AutoCloseable接口。
        try (FileInputStream inputStream = new FileInputStream(new File("test"))) {
            System.out.println(inputStream.read());
        } catch (IOException e) {
            throw new RuntimeException(e.getMessage(), e);
        }
77.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？
    照样执行
78.常见的异常类有哪些？
    Throwable是所有异常或错误的超类。
    Error是Throwable的子类。
    Exception是Throwable的子类。
        异常分为两大类：
            Checked异常：非Runtime异常。用户代码显式抛出的异常。编译器强制要求处理异常或抛出异常，否则通不过编译。
                    f(){
                        int a = 123;
                        if(a = 1233){
                            throw new NullPointerException();
                        }
                    }
                    f()的调用者要么向上抛异常(throws)，要么处理异常（try..catch）。
            Runtime异常：所有RuntimeException类及其子类的实例被称为Runtime异常。不可预见的异常，在运行时候抛出。
    常见运行时异常：
        ClassCastException(类转换异常)：
            instanceof：判断一个对象是否为一个类的实例。obj instanceog Class。
                        1、obj必须为引用类型，不能是基本类型。
                        2、obj为null返回false。
                        3、obj为类或接口的直接或间接子类，返回true。
                        4、
                            ArrayList arrayList = new ArrayList();
                            arrayList instanceof List;  // true
                            List list = new ArrayList();
                            list instanceof ArrayList; // true
        ArrayIndexOutOfBoundsException(数据越界异常)
                访问不不在的数组索引，或设置了负数索引。
        NullPointerException(空指针异常)
                public class mainTest {
                    public static void main(String[] args)  {
                        Person person = new Person(2,"saisai");
                        person = null;
                        System.out.println(person.getAge());
                    }
                }
                使用前判断是否为空（null）。
                亦可使用Optional优雅地决绝判断null的多层嵌套。
        ArrayStoreException(数据存储异常)
        BufferOverflowException(缓冲溢出异常)
79.http 响应码 301 和 302 代表的是什么？有什么区别？

80.forward 和 redirect 的区别？

81.简述 tcp 和 udp的区别？

82.tcp 为什么要三次握手，两次不行吗？为什么？
    三次握手：
        第一次握手：客户端给服务器发送一个SYN报文。
        第二次握手：服务端收到SYN报文之后，会应答一个SYN+ACK报文。
        地三次握手：客户端收到SYN+ACK报文之后，会回应一个ACK报文。
    四次挥手：
        假设是客户端先发起关闭请求。
        第一次挥手：客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于CLOSED_WAIT1状态。
        第二次挥手：服务端收到FIN之后，会发送ACK报文，且把客户端的序列号值+1作为ACK报文的序列号值，表明已经收到客户端的报文了，此时服务端处于CLOSE_WAIT2状态。
        第三次挥手：如果服务端也想断开连接，和客户端的第一次挥手一样，发给FIN报文，且指定一个序号。此时服务器端处于LAST_ACK状态。
        第四次挥手：客户端收到FIN之后，一样发送一个ACK报文作为应答，且把服务端的序列号值+1作为自己ACK报文的序列号，此时客户端处于TIME_WAIT状态。需要过一阵子
                   以确保服务端收到自己ACK报文之后才会进入CLOSED状态。
                   服务器端收到自己的ACK报文之后才会进入CLOSED状态。
83.说一下 tcp 粘包是怎么产生的？
    TCP是基于字节流的传输层通信协议，调用发送函数只是把数据拷贝到了发送缓冲区，然后再由驱动从缓冲区拷贝数据拼包发送到网络，
    接收端也是先把数据拷贝到接收缓冲区，再通知上层处理，上层需要自己重新整理数据，形成原始的发送格式。
84.OSI 的七层模型都有哪些？

85.get 和 post 请求有哪些区别？

86.如何实现跨域？

87.说一下 JSONP 实现原理？

179.redis 是什么？都有哪些使用场景？
    redis是内存数据库，所有数据都放在内存。并可选择持久化。
    高速缓存。
    消息队列。
    分布式会话（保存session）。
    分布式锁（全局id，减库存、秒杀等）。
    计数器（浏览量、播放量等。可减轻数据库压力，使用incr加1，内存操作，性能好）。
    排行榜（浏览排行榜、销售排行榜等。redis提供有序集合数据类能实现各种复杂的排行榜应用）
180.redis 有哪些功能？

181.redis 和 memecache 有什么区别？
    1) redis支持的数据更多。
    2) redis 可持久化，而 memecache 不能
    3) 两者都是内存数据库
182.redis 为什么是单线程的？
    1) redis 是基于内存的操作，CPU不是瓶颈。
       Redis的瓶颈最有可能是内存和宽带。既然单线程容易实现，而且CPU不会成为瓶颈，那么顺理成章地采用单线程的方案。
    2) 不需要各种锁的性能消耗。
       Redis的数据结构并不全是简单的k-v，还有lish、hash等复杂的结构，这些结构可能会进行很细粒度的操作，比如在很长的列表后面添加一个元素，在hash当中添加
       或者删除一个对象，这些操作可能就需要加非常多的锁，导致同步开销大大增加。
       在单线程的情况下，就不用考虑各种锁的问题，不存在加锁释放的操作，没有因为可能出现死锁而导致的性能消耗。
    3) 单线程多进程集群方案
       多线程的自然比单线程有更高的性能上限，但是在今天的计算环境，即时单机多线程的上限也往往不能满足需要了，单线程多进程的集群方案中多线程的技术用不上。
    4) CPU消耗
       采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多线程导致的切换而消耗CPU。
       如果CPU称为瓶颈，或不想让其他CPU闲置，可考虑多起几个Redis进程。
    Redis采用网络IO多路复用技术来保证在多连接的时候系统的高吞吐量。尽量减少网络IO的时间消耗。

183.什么是缓存穿透？怎么解决？

184.redis 支持的数据类型有哪些？
    String
    Hash
    List
    Set
    sorted set
185.redis 支持的 java 客户端都有哪些？
    jedis redission
        jedis使用：
            >>>
            Jedis jedis = new Jedis("192.168.1.1", 6379);
            String code = jedis.set("ss", "wang");
            String s = jedis.get("ss");
            >>>
        直连:
            优点：简单方便。
            缺点: 1) 存在每次新建/关闭TCP连接开销
                  2) Jedis对象数量无法控制。
                  4) Jedis 对象线程不安全。
        连接池：
            优点：1) 无需每次连接都生成Jedis对象。
                 2) 无需每次连接都创建TCP连接
                 3) 可控制Jedis对象数量。
            缺点：1) 配置参数多，配置不合理也会出现问题。

        Jedis提供了JedisPool这个类作为Jedis的连接池：
        >>>
        // 配置
        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();
        jedisCommands.setMaxTotal(1024);
        jedisCommands.setMaxIdle(100);
        jedisCommands.setMaxWaitMillis(100);
        jedisCommands.setTestOnBorrow(false);
        jedisCommands.setTestOnReturn(true);
        // 初始化JedisPool
        JedisPool jedisPool = new JedisPool(jedisPoolConfig, "192.168.1.1", 6379, 2000);
        Jedis jedis = jedisPool.getResource(); 
        JedisCommands jedisCommands = jedis;
        jedisCommands.set("ss", "wang");
        >>>

        jedis pipeline：
        jedis 支持Pipeline特性。
        >>>
         public void mdel(List<String> keys) {
            Jedis jedis = new Jedis("192.168.58.99");
            Pipeline pipeline = jedis.pipelined();
            for (String key : keys) {
                pipeline.del(key); // 此时命令并非真正执行
            }
            // 真正执行命令
            pipeline.sync(); // 除了pipline.sync(),还可以使用pipeline.syncAndReturnAll()将pipeline的命令进行返回。
        }
        >>>

        线程安全：
        Jedis单实例：
            单实例不是线程安全的，jedis的请求流和响应流都是全局变量，是共享的。
            当不同的线程在set和get的时候，有可能出现线程A的set()的响应流，被线程B的get()作为响应返回。
            为什么单实例是单线程而不是多线程？
            是因为redis就是单线程，一个实例使用一个线程和使用100个线程去发送命令没有本质的区别，所以没必要设置为线程安全。
        连接池是线程安全的：
            因为连接池使用到了多个实例。
186.jedis 和 redisson 有哪些区别？
http://www.cnblogs.com/yw0219/p/6084128.html
https://www.cnblogs.com/hackyo/p/6646051.html
187.怎么保证缓存和数据库数据的一致性？

188.redis 持久化有几种方式？

189.redis 怎么实现分布式锁？
    基于数据库、基于缓存（redis等）、基于Zookeeper三种方案。
    1、基于数据库
         1）数据表字段加唯一索引约束
            加锁：insert into methodLock(method_name,desc) values (‘method_name’,‘desc’)
            去锁：delete from methodLock where method_name ='method_name'
            缺点: 1、强依赖数据库，数据库挂掉则业务系统不可用。
                  2、锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁。
                  3、非重入锁。
                  4、非阻塞，insert失败则直接报错，没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作。
            解决之道：1、两个数据库双向同步，一旦挂掉快速切换。
                     2、定时任务，每个一段时间把数据库中的超时数据清理一遍
                     3、数据表加字段，记录获取锁的机器的主机信息和线程信息，获取锁的时候先查。
                     4、while循环，直到insert成功。
         2）数据库排他锁
            select * from methodLock where method_name=xxx for update
            for update申请排他锁的前提：没有线程对该结果集中的任何数据使用排他锁或共享锁，否则申请会阻塞。
            仅适用于InnoDB，且必须在事务块中才能生效。
190.redis 分布式锁有什么缺陷？

191.redis 如何做内存优化？

192.redis 淘汰策略有哪些？
    过期策略：
        1、被动删除
        2、主动删除（定时扫描）：如果大量的key在同一时间过期了，就会频繁扫描。
    从库过期策略：
        从库不进行过期扫描，从库对过期的处理都是被动的。指令同步时异步进行的，主从会出现数据不一致。
        使用expire timestamp指定过期时间。
    最大内存策略：
        当redis内存超过物理内存限制时，内存的数据会开始和磁盘产生频繁的交换，性能下降。
        redis可以设置最大内存，及超出策略。
    懒惰删除：
        redis 4.0之前删除大对象key(包含了大量元素的hash)，则会导致单线程卡顿。
        redis 4.0之后，引入了unlink，丢给后台进程异步回收内存。
        flushdb、flushall可被flushall async和flushall async替代。
        同步AOF日志到磁盘，在异步线程中完成，独立的异步线程，和懒惰删除线程不是同一个。

193.redis 常见的性能问题有哪些？该如何解决？

194.主从key不一致有哪些原因？
    1、key过期问题
    2、复制通道异常
    3、复制高延迟
    4、贮存内存限制是否一致