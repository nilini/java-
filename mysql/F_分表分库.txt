为什么分表
    1）用户请求量太大
        但服务器内存、性能有限。
    2）单库太大
    3）单表太大

如何分库分表
    水平切分和垂直切分
    垂直切分：
        1）垂直分表
            按字段切分，将不常用、数据较大的字段拆分到拓展表。
        2）垂直分库
            针对一个系统中的不同业务进行拆分。user库，product库，order库。
    水平拆分：
        1）水平分表
            对数据量比较大的单张表，按照某种规则（range\hash取模\地理\时间）切分到多张表。
        2）水平分表分库
            将单张表的数据切分到多个服务器上去。每个服务器具有相应的库与表，只是表中数据不同。

引起的问题

1、join
    1）反范式设计，避免跨表join查询。
        如：在订单表中保存卖家id和卖家name，很多时候显示订单卖家信息的时候，就不需要去跨表跨库join了。
    2）合理设计，避免跨表跨库查询。
        将用户的订单放到同一个表，就不用到别的分表去查询了。
    3）字典表或全局表的多表备份
        将改动少，数据少的表在所有的库中备份，避免跨库join查询。
    4）系统层组装
        分别查询出所有，然后组装起来，比较复杂
2、uuid
    1）每个表设置自己的自增起始id
    2）自增id加步长
    3）常用的中间件，以redis和zookeeper为例，都有产生分布式唯一ID的方案，如redis的getAndIncrement，zookeeper的sequenceId。都是分布式UUID的解决方案。
    4）提前生成保存到表中
3、事务支持
    如果依赖数据库本身的分布式事务管理功能去执行事务，将付出高昂的性能代价。如果由应用程序去协助控制，形成程序逻辑上的事务，又会造成编程方面的负担。
4、多库结果集合并（group by, order by）
    分别查询出数据，再组合