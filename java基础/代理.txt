静态代理和动态代理（基于JDK的实现，基于cglib的实现）。
静态代理：
==================================
/**
 * 接口
 */
public interface IUserDao {

    void save();
}
==================================
/**
 * 接口实现
 * 目标对象
 */
public class UserDao implements IUserDao {
    public void save() {
        System.out.println("----已经保存数据!----");
    }
}
============================================
/**
 * 代理对象,静态代理
 */
public class UserDaoProxy implements IUserDao{
    //接收保存目标对象
    private IUserDao target;
    public UserDaoProxy(IUserDao target){
        this.target=target;
    }

    public void save() {
        System.out.println("开始事务...");
        target.save();//执行目标对象的方法
        System.out.println("提交事务...");
    }
}
========================================
/**
 * 测试类
 */
public class App {
    public static void main(String[] args) {
        //目标对象
        UserDao target = new UserDao();

        //代理对象,把目标对象传给代理对象,建立代理关系
        UserDaoProxy proxy = new UserDaoProxy(target);

        proxy.save();//执行的是代理的方法
    }
}
=================================================================
静态代理
    优点：可以做到在不修改目标对象的的前提下，对目标功能拓展。
    缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类
=================================================================
jdk动态代理：
public class Test {
  static interface Subject{
    void sayHi();
    void sayHello();
  }
   
  static class SubjectImpl implements Subject{
 
    @Override
    public void sayHi() {
      System.out.println("hi");
    }
 
    @Override
    public void sayHello() {
      System.out.println("hello");
    }
  }
   
  static class ProxyInvocationHandler implements InvocationHandler{
    private Subject target;
    public ProxyInvocationHandler(Subject target) {
      this.target=target;
    }
 
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
      System.out.print("say:");
      return method.invoke(target, args);
    }
     
  }
   
  public static void main(String[] args) {
    Subject subject=new SubjectImpl();
    Subject subjectProxy=(Subject) Proxy.newProxyInstance(subject.getClass().getClassLoader(), subject.getClass().getInterfaces(), new ProxyInvocationHandler(subject));
    subjectProxy.sayHi();
    subjectProxy.sayHello();
     
  }
}
============================================================================================
基于JDK的动态代理：
    缺点: 使用动态代理的对象必须实现一个或多个接口，如果想代理没有实现接口的类，就可以使用Cglib实现。
============================================================================================
public class UserServiceImplCGLIB implements MethodInterceptor {  
    @SuppressWarnings("unchecked")  
    public <T> T getInstance(Object target, Class<T> clazz) {  
        //字节码加强器：用来创建动态代理类  
        Enhancer enhancer = new Enhancer();  
        enhancer.setSuperclass(target.getClass()); //代理的目标对象  
        enhancer.setCallback(this); //回调类，在代理类方法调用时会回调Callback类的intercept方法  
          
        Object result = enhancer.create(); //创建代理类  
        System.out.println(result.getClass().getName());  
          
        return (T)result;  
    }  
      
    @Override  
    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {  
        //对目标方法进行拦截处理  
        System.out.println("start...");  
        Object result = proxy.invokeSuper(obj, args); //调用目标类（父类）的方法  
        System.out.println("end");  
        return result;  
    }  
}  
测试：
public class Test {  
    public static void main(String[] args) {  
        UserServiceImpl userService = new UserServiceImpl();  
        UserServiceImplCGLIB cglib = new UserServiceImplCGLIB();  
        UserServiceImpl proxy = cglib.getInstance(userService, UserServiceImpl.class);  
          
        User user = proxy.getUserById(100L);  
          
        String username = Optional.of(user).map(u -> u.getUsername()).orElse("");  
        System.out.println(username);  
    }  
}  
