【阿里天猫、蚂蚁、钉钉面试题目】
1、微信红包怎么实现。
    https://blog.csdn.net/varyall/article/details/78657726
2、海量数据分析。
    pass.
3、测试职位问的线程安全和非线程安全。
    
4、HTTP2.0、thrift。
    http:
        协议：超文本传输协议，无状态协议（每次请求都是独立的，通过cookie、session带状态。）。
        状态码：301（永久重定向），302（临时重定向），404（找不到资源），500（服务器错误，代码问题）
        请求方式：get、post、options(跨域预检请求)、put、head、delete
        流程：域名解析、TCP三次握手、发起http请求、服务器响应http请求、浏览器解析资源、渲染
        https：披着SSL外壳的HTTP，利用安全信道加密通信数据。http明文发送。
5、面试电话沟通可能先让自我介绍。

6、分布式事务一致性。
    2pc、3pc
7、nio的底层实现。

8、jvm基础是必问的，jvm GC原理，JVM怎么回收内存。

9、Java是什么。

10、API接口与SDI接口的区别（API是提供给别人的接口）。

11、dubbo如何一条链接并发多个调用。Dubbo的原理，序列化相关问题。

12、用过哪些中间件。

13、做过工作流引擎没有。

14、以前的工作经历，自己觉得出彩的地方（钉钉）

15、线程池的一些原理，锁的机制升降级（天猫、蚂蚁）

16、从系统层面考虑，分布式从哪些纬度考虑（天猫）

17、Hadoop底层怎么实现（天猫）

18、threadLocal，线程池，hashMap/hashTable/coccurentHashMap等（天猫）

19、秒杀系统的设计（天猫）

20、虚拟机，IO相关知识点（天猫）

21、Linux的命令（天猫）

22、一个整形数组，给定一个数，在数组中找出两个数的和等于这个数，并打印出来，我写的时间复杂度高，要求O(n)。（天猫）

23、n个整数，找出连续的m个数加和是最大。（天猫）

24、更重视开源技术（蚂蚁金服上海）

25、数据库锁隐原理（蚂蚁金服网商）

26、1000个线程同时运行，怎么防止不卡（航旅）

27、并列的并发消费问题（航旅）

28、高并发量大的话怎么处理热点，数据等（蚂蚁金服）

29、如何获取一个本地服务器上可用的端口

30、流量控制相关问题（蚂蚁金服）

31、数据库TPS是多少，是否进行测试过（天猫）

32、缓存击穿有哪些方案解决（天猫）

33、Java怎么挖取回收器相关原理（财富）

34、Java的集合都有哪些，都有什么特点（信息平台）

35、分布式锁，redis缓存，spring aop，系统架构图，MySQL的特性（信息平台）

36、场景，同时给10万个人发工资，怎么样设计并发方案，能确保在1分钟内全部发完 打个比方会提出类似的场景（信息平台）
    按不同的耗时，启用相应数量的线程。

【阿里巴巴面试题目】
1、java事件机制包括哪三个部分？分别介绍。
    事件、事件监听器、事件源
2、为什么要使用线程池？
    线程创建消耗cpu和时间，如果任务来了再创建线程会时间开销。
3、线程池有什么作用？
    1）减少了创建和销毁线程的次数，线程创建过程消耗cpu和时间，每个线程都可以被重复利用。
    2）任务来了就能执行
    3）方便控制线程数量和复用线程
3.1 多线程一定比单线程高效吗？
    不一定，多线程会有上下文切换开销，单线程没有这种开销。多线程会有锁的问题。
4、说说几种常见的线程池及使用场景。
    1）newSingleThreadExecutor 创建一个单线程化的线程池，只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序执行。
    2）newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
    3）newCachedThreadPool 创建一个可缓存线程池，如果线程池长度超多处理需要，可灵活回收空闲线程，若无可回收，则新建线程。
    4）newScheduledThreadPool 创建一个定长线程池，支持定时周期性任务执行。
    批量发邮件、短信、订阅
5、线程池都有哪几种工作队列？
    1）ArrayBlockingQueue 基于数组结构的有界阻塞队列，此队列按先进先出原则对元素进行排序。
    2）LinkedBlockingQueue 基于链表结构的阻塞队列，此队列按先进先出排序元素。
    3）SynchronousQueue 不存储元素的阻塞队列。每个插入操作必须等待到另一个线程调用移除操作，否则插入操作一直处于阻塞状态。
    4）PriorityBlockingQueue 具有优先级的无限阻塞队列。
    https://www.jianshu.com/p/6c6f396fc88e
6、怎么理解无界队列和有界队列？
    https://www.cnblogs.com/hujinshui/p/10342897.html
    https://my.oschina.net/u/3999718/blog/3007143
    有界队列：有固定大小的队列。
    无界队列：没有设置固定大小的队列，可以直接入队列，知道溢出，但不会超过Integer.MAX_VALUE。
7、线程池中的几种重要的参数及流程说明。
    https://reeboo.iteye.com/blog/1936424
    https://www.cnblogs.com/aspirant/p/8628843.html
    handler：表示当拒绝处理任务时的策略。
    threadFactory：线程工厂，用来创建线程。
    corePoolSize：线程池中允许同时运行的最大线程数。
    maxinumPoolSize：线程池允许的最大线程数，表示最大能创建多少个线程，大于等于corePoolSize
    keepAliveTime：线程没有任务时最多保持多久然后停下。
7.1 线程池大小设置
    https://www.cnblogs.com/cjsblog/p/9068886.html
    任务类型：CPU密集型、IO密集型、混合型。
    1）cpu密集型任务
        尽量使用较小的线程池，一般为N+1。即使当计算密集型的线程偶尔由于缺失故障或者其他原因而暂停时，这个额外的线程也能确保CPU的时钟周期不会被浪费。
        CPU密集型任务使得CPU使用率很高，若开过多的线程，只能增加上下文切换的次数，因此会带来额外的开销。
    2）可以使用稍大的线程池，一般为2*N+1。
        IO密集型任务CPU使用率并不高，因此可以让CPU在等待IO的时候去处理别的任务，充分利用CPU时间。
    3）

8、什么是反射机制？
    在运行时获取类的属性和方法，并动态调用类的方法。
9、说说反射机制的作用。
    不用写死代码，可以动态配置代码。
10、反射机制会不会有性能问题？
    会有性能问题，不过不用在意，spring中大量使用反射。
11、你怎么理解http协议？
    https://www.cnblogs.com/wxisme/p/6212797.html
    无状态，每次请求都是独立的。
    基于TCP协议。
12、说说http协议的工作流程。 
    1）解析ip
    2）建立TCP连接，三次握手
    3）封装数据http数据包，封装tcp数据包。
13、http有哪些请求提交方式？
    get post head options put delete
14、http中的200,302,403,404,500,503都代表什么状态？
    200 ok
    301 永久性转移
    302 暂时性转移
    403 权限问题，被禁止
    404 not found
    500 服务器错误，一般是代码错误
    503 服务器繁忙会崩溃
15、http get和post有什么区别？

16、你怎么理解cookie和session，有哪些不同点？

17、什么是web缓存？有什么优点？

18、什么是https，说说https的工作原理？
    https://www.cnblogs.com/JeffreySun/archive/2010/06/24/1627247.html
    https://blog.51cto.com/11883699/2160032
    https://blog.csdn.net/wangtaomtk/article/details/80917081
    https://blog.csdn.net/woshinannan741/article/details/71550436
    对称加密：加密解密使用同一套算法，很容易逆向。
    非对称加密：分为公钥和私钥。公钥是谁都有，用于对信息加密，只有私钥才能解密。
    HTTP协议组成：HTTP协议和SSL/TLS协议。SSL/TLS就是负责加密解密等安全处理的模块，所以HTTPS的核心在SSL/TLS上面。
    端口：默认443。
    通信：
        A、B各有一套用于加密解密的公钥和私钥。
        A、B互发公钥，使用公钥加密，使用私钥解密。
    服务器S将自己的公钥S发给客户端C，客户端C使用公钥S加密自己的公钥C并发给服务器S。
    客户端获取公钥最直接的方法是服务器端将公钥发送给每一个客户端，这个时候就出现了公钥被劫持的问题，黑客劫持公钥。
    
    如何安全的获取公钥？并确保公钥的获取是安全的？
    使用SSL证书（需要购买）和CA机构。
    1）操作系统保存有证书发布机构的证书，证书发布机构的私钥加密分发证书的指纹和指纹算法，证书发布机构的公钥对指纹和指纹算法揭秘。
    2）服务器向CA权威机构购买证书，这个证书中有公钥、指纹、指纹算法。
    通信：
        1）服务器将某某公司证书发给浏览器
        2）浏览器从操作系统中获取相应证书发布机构的证书，取出该机构证书的公钥，然后用该公钥解密指纹和指纹算法。
        3）使用指纹算法计算某某公司证书的指纹，然后与某某公司证书中的指纹对比。
        4）指纹对比通过就可以确定服务器发来的证书中的公钥是某某公司。
        5）公钥已经安全的送达，然后再用公钥加密传输对称性加密的密钥。
        6）使用对称性加密数据传输。


19、什么是http代理服务器，有什么用？

20、什么是虚拟主机及实现原理？

21、什么是Java虚拟机，为什么要使用？

22、说说Java虚拟机的生命周期及体系结构。

23、说一说Java内存区域。

24、什么是分布式系统？

25、分布式系统你会考虑哪些方面？

26、讲一讲TCP协议的三次握手和四次挥手流程。

27、为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？

28、为什么TCP TIME_WAIT状态还需要等2MSL后才能返回到CLOSED状态？

29、什么是DoS、DDoS、DRDoS攻击？如何防御？

30、描述一下Java异常层次结构。
    Error：错误，是程序无法处理的错误。比如OutOfMemoryError。
    Exception：异常，是程序本身可以处理的异常。NullPointerException、ArithmeticException、ArrayIndexOutOfBoundException
    Error和Exception继承Throwable。
31、什么是检查异常，不受检查异常，运行时异常？并分别举例说明。
    可查异常：编译器会检查它，当程序中出现这类异常，要么用try-catch捕获，要么用throws抛出，否则编译器不会通过，
    不受检查异常：编译器不要求强制处置的异常，包括运行时异常（RuntimeException）和错误（Error）。
    运行时异常：不受检查异常。
32、finally块一定会执行吗？
    一般情况下会会执行。
    1）System.exit(0); 在try或catch块中，则不会执行。在执行finally之前虚拟机被停止。
    2）被设置为守护线程的内部代码的finally可能不会被执行。守护线程随着非守护线程的退出而退出，可能线程退出而还没执行到finally。

33、正常情况下，当在try块或catch块中遇到return语句时，finally语句块在方法返回之前还是之后被执行？
    finally中有return：先执行到try或catch中的return语句，然后跳转到finally中执行return，此时直接返回，不会再去执行try或catch中的return。
    finally中没有return：先执行到try或catch中的return语句，然后在跳转到finally块执行语句，然后再跳转回try或catch块执行return。
34、try、catch、finally语句块的执行顺序。
    1）finally一定最后执行。
    2）无异常：try执行，finally执行，finally之后的语句执行。
    3）有异常：
            catch能捕获：try中语句执行到异常时，跳转到catch中执行，最后执行finally中的语句，但是finally之后的语句不会被执行。
            catch不能捕获：try中语句执行到异常时，此时catch无法捕获，则交给jvm处理，但是finally中的语句还是会被执行。
35、Java虚拟机中，数据类型可以分为哪几类？
    基本类型和引用类型。
    基本类型的变量保存原始值；引用类型的变量保存引用值。
    https://www.cnblogs.com/cxzdy/p/5388509.html
36、怎么理解栈、堆？堆中存什么？栈中存什么？

37、为什么要把堆和栈区分出来呢？栈中不是也可以存储数据吗？
    堆栈分离，使得堆中的内容可以被多个栈共享，即多线程访问同一个对象。
    模块化，堆中数据和栈中数据有不同点。
    https://www.jianshu.com/p/05b4830a0010
38、在Java中，什么是是栈的起始点，同是也是程序的起始点？
    main()方法。
    虚拟机栈存放的是栈帧，栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。
39、为什么不把基本类型放堆中呢？
    基本类型占用的空间一般是1~8字节，需要空间比较少，而且因为是基本类型，所以不会出现动态增长（长度固定），因此栈中存储就够了。
    基本类型和对象的引用都是存放在栈中，而且都是几个字节，因此程序运行时，他们的处理方式是统一的。
    https://soswm.iteye.com/blog/2272179
40、Java中的参数传递时传值呢？还是传引用？

41、Java中有没有指针的概念？
    java中没有指针，但java中有引用。
    基本类型，值就直接保存在变量中。
    引用类型，变量中保存的只是实际对象的地址，一般称为“引用”，引用指向实际对象，实际对象保存这内容。
42、Java中，栈的大小通过什么参数来设置？

43、一个空Object对象的占多大空间？

44、对象引用类型分为哪几类？
    强、软、弱、虚
45、讲一讲垃圾回收算法。

46、如何解决内存碎片的问题？

47、如何解决同时存在的对象创建和对象回收问题？

48、讲一讲内存分代及生命周期。

49、什么情况下触发垃圾回收？

50、如何选择合适的垃圾收集算法？

51、JVM中最大堆大小有没有限制？

52、堆大小通过什么参数设置？

53、JVM有哪三种垃圾回收器？

54、吞吐量优先选择什么垃圾回收器？响应时间优先呢？

55、如何进行JVM调优？有哪些方法？

56、如何理解内存泄漏问题？有哪些情况会导致内存泄露？如何解决？
    内存泄漏：当对象已经不再被使用，但是java的垃圾回收器不能回收它们，就产生了内存泄漏。
    1）大对象使用后未赋值为null。
    2）使用集合时，在使用完成后赋值为nul。
    3）避免死循环等重复创建或对集合添加元素，撑爆内存。
    4）静态成员持有对象。
    5）及时的关闭打开文件，socket句柄等。

    Java服务器表现怪异的主要根源是：垃圾回收GC。
    https://yq.aliyun.com/articles/666058

57、从分布式系统部署角度考虑，分哪几层？
    https://blog.csdn.net/weixin_39893439/article/details/81148879
58、如何解决业务层的数据访问问题？
    DAO：数据访问层。具体到某个表的增删改查。
    service：服务层。在dao层上进行来了一层包装。
59、为了解决数据库服务器的负担，如何做数据库的分布？
    http://youzhixueyuan.com/the-principle-of-separating-tables-reading-and-writing-and-using-scenarios.html
    读写分离。分表分库。
60、什么是著名的拜占庭将军问题？
    分布式中的一致性问题。

61、为什么说TCP/IP协议是不可靠的？
https://www.cnblogs.com/cjm123/p/8431160.html
    ===============
    IP协议并不是一个可靠的协议，它不保证数据被送达，那么，自然的，保证数据送达的工作应该由其他的模块来完成。其中一个重要的模块就是ICMP(网络控制报文)协议。ICMP不是高层协议，而是IP层的协议。
    当传送IP数据包发生错误。比如主机不可达，路由不可达等等，ICMP协议将会把错误信息封包，然后传送回给主机。给主机一个处理错误的机会，这 也就是为什么说建立在IP层以上的协议是可能做到安全的原因。
    ===============
    IP协议是无连接的，不是可靠的协议。
    TCP协议是面向连接的，是可靠的协议。
    为什么TCP负责数据传输的可靠性？
        有的通信数据不能有任何丢失，比如文件传输，丢了一个字节文件就废了。但是有的应用可以忍受一定程度的数据丢失，比如实时传输的语音、视频。
        而一旦IP层实现了可靠传输，那么实时性服务可能就无法提供。

62、讲讲CAP理念。
    1）一致性C
    2）可用性A
    3）区间容错性P
    CP、AP
63、怎么理解强一致性、单调一致性和最终一致性？
    1）强一致性
        系统中的某个数据被成功更新后，后续读取的数据都是更新后的值。
    2）最终一致性
        如果经过一段时间后读取到的数据都是更新后的值，则是最终一致性。承诺最终一致。
    3）单调一致性
        如果一个进程已经读取到一个值，那么后续不会读到更早的值。

64、分布式系统设计你会考虑哪些策略？

65、最常见的数据分布方式是什么？
    1）hash
    2）按数据范围方式：每个节点分布不同范围的数据。
    3）按数据量分布：数据均匀分布。
    4）一致性hash
66、谈一谈一致性哈希算法。
http://www.zsythink.net/archives/1182
https://www.cnblogs.com/xhb-bky-blog/p/9095688.html
https://blog.csdn.net/cb_lcl/article/details/81448570
    分布式集群中，对机器的添加删除，如果采用hash(objct)%N算法，那么在有机器添加或删除后，很多原有的数据就无法找到了。
    添加机器或删除机器，N会变化，几乎所有的映射会变化。
    一致性hash算法：
        各节点首尾相连组成闭环，hash(key)到2^32个节点中。数据存储到映射节点的下一个位置，N是固定的，移除服务器只会影响该服务器的数据，不会出现所有服务器都失效的情况。
        如果服务器不是均匀分布在环上，则会出现大量数据存在一个服务器上，这时候只需要添加虚拟节点。
67、paxos是什么？

68、什么是Lease机制？
    分布式系统中，往往会有一个中心服务器节点。该节点负责存储、维护系统中的元数据。
    如果系统中的各种操作都依赖域中心服务器上的元数据，那么中心服务器很容易成为性能瓶颈及存在单点故障，通过租约机制，可以将中心服务器的“权利“下放到其他机器，减轻中心服务器的压力。

    
    lease：租约，是一种广泛应用于分布式系统领域的协议，它是一种维护分布式系统一致性的有效工具。
    lease通常定义为：颁发者在一定期限内给予持有者一定权利的协议。

    lease用于确定状态 
    先看一个例子。假设有一个master，然后有多个副本。副本中有一个是primiary，其它都是secondary。master用于管理谁是primiary。假设我们用常规的心跳机制，就会出现状态问题。
    比如，primiary其实是可以正常工作并提供对client服务的，primiary与其它secondary之间也是OK的，但master和primiary之间连接闪断了。这时master收不到primiary的心跳，就认为primiary挂了，然后重新选择primiary，这样系统中就会出现两个primiary，也就是双主问题。 其实最基本的原因还是单纯用心跳机制master是无法确定结点状态的。
    下面就谈lease用于解决结点状态问题。
    引用lease机制，master向primary颁发lease，承诺“在这个lease有效期内我不会重新选取primiary”。primiary每个心跳包过来，master就可以颁发新的lease把有效期延长。如果过了lease而master还没收到心跳包，它就认为primiary挂了并重新选择。
    
    这时考虑primiary的两种情况： 
    第一种，primiary是真的挂了，所以没给master回复。这时重选当然是合理的。 
    第二种，primiary没挂，只是和master通信出问题了。这时primiary知道自己的lease到期，master肯定在选取新primiary了，于是它就会放弃primiary身份，不会出现双主问题了。
    
    还有一些其它应用。反正lease的机制是很强大的。 工程上lease的有效期一般选择为10秒。

69、如何理解选主算法？
    Leader选举是保证分布式数据一致性的关键所在。当Zookeeper集群中的一台服务器出现以下情况时，会进入Leader选举。
        1）服务器初始化启动。
        2）服务器运行期间无法和Leader保持连接。
    流程：
        1）每个server发起一个投票。第一轮都会选自己。
        2）接受各个服务器的投票。
        3）处理投票。每一票，服务器都会将自己的投票和别人的投票PK：
            先检查ZXID，再检查myid。
            然后将比较结果再次投出去。
        4）统计投票。
            每次投票后，服务器都会统计投票信息，判断是否已经有过半机器接受到相同的投票信息。
        5）改变服务器状态。
            一旦确定了Leader，相应的服务器就会将自己的状态更新为Follower或Leading
70、OSI有哪七层模型？TCP/IP是哪四层模型。

【阿里巴巴面试题目含答案】
1，mysql的三大引擎是啥？
mysql常用的引擎有InnoDB，MyISAM，Memory，默认是InnoDB
InnoDB：磁盘表，支持事务，支持行级锁，B+Tree索引
ps:优点： 具有良好的ACID特性。适用于高并发，更新操作比较多的表。需要使用事务的表。对自动灾难恢复有要求的表。
缺点：读写效率相对MYISAM比较差。占用的磁盘空间比较大。
mysql的4大特性+4种隔离级别：
MyISAM：磁盘表，不支持事务，支持表级锁，B+Tree索引
ps: 优点：占用空间小，处理速度快（相对InnoDB来说）
缺点：不支持事务的完整性和并发性
MEMORY(Heap)：内存表，不支持事务，表级锁，Hash索引，不支持Blob,Text大类型
ps: 优点：速度要求快的，临时数据
缺点：丢失以后，对项目整体没有或者负面影响不大的时候。

2，redis的hash算法用的是啥？
redis应该是使用一致性hash算法---MurmurHash3 算法，具有低碰撞率优点，google改进的版本cityhash也是redis中用到的哈希算法。
现有的主流的大数据系统都是用的 MurmurHash本身或者改进

分布式负载均衡的时候可供选择的负载均衡算法：轮询算法、哈希算法、最少连接算法、相应速度算法、加权算法
redis服务器较多时，数据要分布在不同的服务器，使用一致性哈希算法，target = hash(key)%N，确定服务器。

3，nosql为啥比sql快？
Nosql是非关系型数据库，因为不需要满足关系数据库数据一致性等复杂特性所以速度快；
sql是关系型数据库，功能强大，但是效率上有瓶颈

4，什么是索引为啥nosql没索引？nosql有索引滴
索引分为聚簇索引和非聚簇索引两种，聚簇索引是按照数据存放的物理位置为顺序的，而非聚簇索引就不一样了；聚簇索引能提高多行检索的速度，而非聚簇索引对于单行的检索很快。
聚簇索引：有主键时，根据主键创建聚簇索引；没有主键时，会用一个唯一且不为空的索引列做为主键，成为此表的聚簇索引；如果以上两个都不满足那innodb自己创建一个虚拟的聚集索引
非聚簇索引：非聚簇索引都是辅助索引，像复合索引、前缀索引、唯一索引

5，B+树和B树区别？
https://blog.csdn.net/u013411246/article/details/81088914
https://www.cnblogs.com/ivictor/p/5849061.html

1）B+树只有叶子节点会带有指向记录的指针，而B树所有节点都带有。
2）B+树内部节点的索引项会出现在叶子节点中，B树则不会。
3）B+树的所有叶子节点都是通过指针连接再一起，而B树不会。
B+树的优点：
    1）叶子节点之间通过指针来连接，范围扫面将是十分简单；而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。
    2）非叶子节点不会带上rowid，这样，一个块中可以容纳更多的索引项，一是可以降低树的高度，二是一个内部节点可以定位更多的内部节点。
相同点：
    B树和B+树都是多路搜索树（并不是二叉的）。